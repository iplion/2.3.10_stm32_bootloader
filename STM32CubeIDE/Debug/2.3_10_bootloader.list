
2.3_10_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003500  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003978  08003978  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003978  08003978  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003978  08003978  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000078  080039f4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080039f4  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089fb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8a  00000000  00000000  00028a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e08  00000000  00000000  0002b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087cc  00000000  00000000  000434a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008436e  00000000  00000000  0004bc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cffe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f8  00000000  00000000  000d0038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080035f4 	.word	0x080035f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080035f4 	.word	0x080035f4

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <dataCreate>:
#define CURR_LIGHT_LEVEL 0x11
#define ON_LIGHT_LEVEL 0x12
#define OFF_LIGHT_LEVEL 0x13
#define CURR_LED_STATE 0x14

uint8_t dataCreate(char* buf, uint8_t dataType, uint8_t data2send) {
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	460b      	mov	r3, r1
 80001a2:	70fb      	strb	r3, [r7, #3]
 80001a4:	4613      	mov	r3, r2
 80001a6:	70bb      	strb	r3, [r7, #2]
  *(buf+1) = dataType;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3301      	adds	r3, #1
 80001ac:	78fa      	ldrb	r2, [r7, #3]
 80001ae:	701a      	strb	r2, [r3, #0]
  if (dataType >> 4) {
 80001b0:	78fb      	ldrb	r3, [r7, #3]
 80001b2:	091b      	lsrs	r3, r3, #4
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d011      	beq.n	80001de <dataCreate+0x46>
    *(buf) = 2;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2202      	movs	r2, #2
 80001be:	701a      	strb	r2, [r3, #0]
    *(buf+2) = data2send;
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	3302      	adds	r3, #2
 80001c4:	78ba      	ldrb	r2, [r7, #2]
 80001c6:	701a      	strb	r2, [r3, #0]
    *(buf+3) = (2 + dataType + data2send);
 80001c8:	78fa      	ldrb	r2, [r7, #3]
 80001ca:	78bb      	ldrb	r3, [r7, #2]
 80001cc:	4413      	add	r3, r2
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	3303      	adds	r3, #3
 80001d4:	3202      	adds	r2, #2
 80001d6:	b2d2      	uxtb	r2, r2
 80001d8:	701a      	strb	r2, [r3, #0]
    return 4;
 80001da:	2304      	movs	r3, #4
 80001dc:	e009      	b.n	80001f2 <dataCreate+0x5a>
  } else {
    *(buf) = 1;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2201      	movs	r2, #1
 80001e2:	701a      	strb	r2, [r3, #0]
    *(buf+2) = (1 + dataType);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3302      	adds	r3, #2
 80001e8:	78fa      	ldrb	r2, [r7, #3]
 80001ea:	3201      	adds	r2, #1
 80001ec:	b2d2      	uxtb	r2, r2
 80001ee:	701a      	strb	r2, [r3, #0]
    return 3;
 80001f0:	2303      	movs	r3, #3
  }
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <chars2int>:
  uint16_t address;
  uint8_t dataType;
  uint8_t buf[16];
} HEXData;

uint8_t chars2int(char *buf) { //возвращает int из 2-х char
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  uint8_t result;
  if (*buf >= '0' && *buf <= '9') {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b2f      	cmp	r3, #47	; 0x2f
 800020a:	d908      	bls.n	800021e <chars2int+0x22>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b39      	cmp	r3, #57	; 0x39
 8000212:	d804      	bhi.n	800021e <chars2int+0x22>
    result = (*buf - '0');
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	3b30      	subs	r3, #48	; 0x30
 800021a:	73fb      	strb	r3, [r7, #15]
 800021c:	e00e      	b.n	800023c <chars2int+0x40>
  } else if (*buf >= 'A' && *buf <= 'F') {
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b40      	cmp	r3, #64	; 0x40
 8000224:	d908      	bls.n	8000238 <chars2int+0x3c>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b46      	cmp	r3, #70	; 0x46
 800022c:	d804      	bhi.n	8000238 <chars2int+0x3c>
    result = (*buf - 'A' + 10);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	3b37      	subs	r3, #55	; 0x37
 8000234:	73fb      	strb	r3, [r7, #15]
 8000236:	e001      	b.n	800023c <chars2int+0x40>
  } else return 0;
 8000238:	2300      	movs	r3, #0
 800023a:	e028      	b.n	800028e <chars2int+0x92>
  buf++;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
  result <<= 4;
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	011b      	lsls	r3, r3, #4
 8000246:	73fb      	strb	r3, [r7, #15]
  if (*buf >= '0' && *buf <= '9') {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b2f      	cmp	r3, #47	; 0x2f
 800024e:	d90b      	bls.n	8000268 <chars2int+0x6c>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b39      	cmp	r3, #57	; 0x39
 8000256:	d807      	bhi.n	8000268 <chars2int+0x6c>
    result += (*buf - '0');
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781a      	ldrb	r2, [r3, #0]
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	4413      	add	r3, r2
 8000260:	b2db      	uxtb	r3, r3
 8000262:	3b30      	subs	r3, #48	; 0x30
 8000264:	73fb      	strb	r3, [r7, #15]
 8000266:	e011      	b.n	800028c <chars2int+0x90>
  } else if (*buf >= 'A' && *buf <= 'F') {
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b40      	cmp	r3, #64	; 0x40
 800026e:	d90b      	bls.n	8000288 <chars2int+0x8c>
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b46      	cmp	r3, #70	; 0x46
 8000276:	d807      	bhi.n	8000288 <chars2int+0x8c>
    result += (*buf - 'A' + 10);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	781a      	ldrb	r2, [r3, #0]
 800027c:	7bfb      	ldrb	r3, [r7, #15]
 800027e:	4413      	add	r3, r2
 8000280:	b2db      	uxtb	r3, r3
 8000282:	3b37      	subs	r3, #55	; 0x37
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e001      	b.n	800028c <chars2int+0x90>
  } else return 0;
 8000288:	2300      	movs	r3, #0
 800028a:	e000      	b.n	800028e <chars2int+0x92>
  return result;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <dataHEXDecrypt32BitBuf>:

uint8_t dataHEXDecrypt32BitBuf(HEXData *hex, char *buf, uint8_t dataLength) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	4613      	mov	r3, r2
 80002a4:	71fb      	strb	r3, [r7, #7]
  hex->dataSize = dataLength;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	79fa      	ldrb	r2, [r7, #7]
 80002aa:	701a      	strb	r2, [r3, #0]
  uint32_t crc = dataLength;
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	617b      	str	r3, [r7, #20]
  buf += 3; //сдвигаем buf на начало адреса
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	3303      	adds	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  hex->address = chars2int(buf);
 80002b6:	68b8      	ldr	r0, [r7, #8]
 80002b8:	f7ff ffa0 	bl	80001fc <chars2int>
 80002bc:	4603      	mov	r3, r0
 80002be:	b29a      	uxth	r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	805a      	strh	r2, [r3, #2]
  crc += hex->address;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	885b      	ldrh	r3, [r3, #2]
 80002c8:	461a      	mov	r2, r3
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	4413      	add	r3, r2
 80002ce:	617b      	str	r3, [r7, #20]
  hex->address <<= 8;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	885b      	ldrh	r3, [r3, #2]
 80002d4:	021b      	lsls	r3, r3, #8
 80002d6:	b29a      	uxth	r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	805a      	strh	r2, [r3, #2]
  buf += 2;
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	3302      	adds	r3, #2
 80002e0:	60bb      	str	r3, [r7, #8]
  hex->address += chars2int(buf);
 80002e2:	68b8      	ldr	r0, [r7, #8]
 80002e4:	f7ff ff8a 	bl	80001fc <chars2int>
 80002e8:	4603      	mov	r3, r0
 80002ea:	4619      	mov	r1, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	885a      	ldrh	r2, [r3, #2]
 80002f0:	b28b      	uxth	r3, r1
 80002f2:	4413      	add	r3, r2
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	805a      	strh	r2, [r3, #2]
  crc += hex->address;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	885b      	ldrh	r3, [r3, #2]
 80002fe:	461a      	mov	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	4413      	add	r3, r2
 8000304:	617b      	str	r3, [r7, #20]
  buf += 2;
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	3302      	adds	r3, #2
 800030a:	60bb      	str	r3, [r7, #8]
  hex->dataType = chars2int(buf);
 800030c:	68b8      	ldr	r0, [r7, #8]
 800030e:	f7ff ff75 	bl	80001fc <chars2int>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	711a      	strb	r2, [r3, #4]
  crc += hex->dataType;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	791b      	ldrb	r3, [r3, #4]
 800031e:	461a      	mov	r2, r3
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4413      	add	r3, r2
 8000324:	617b      	str	r3, [r7, #20]
  buf += 2;
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	3302      	adds	r3, #2
 800032a:	60bb      	str	r3, [r7, #8]
        buf += 2;
      }
    }
  }
  else {*/
    for (int i = 0; i < dataLength; i++) {
 800032c:	2300      	movs	r3, #0
 800032e:	613b      	str	r3, [r7, #16]
 8000330:	e019      	b.n	8000366 <dataHEXDecrypt32BitBuf+0xce>
      hex->buf[i] = chars2int(buf);
 8000332:	68b8      	ldr	r0, [r7, #8]
 8000334:	f7ff ff62 	bl	80001fc <chars2int>
 8000338:	4603      	mov	r3, r0
 800033a:	4619      	mov	r1, r3
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	693b      	ldr	r3, [r7, #16]
 8000340:	4413      	add	r3, r2
 8000342:	3305      	adds	r3, #5
 8000344:	460a      	mov	r2, r1
 8000346:	701a      	strb	r2, [r3, #0]
      crc += hex->buf[i];
 8000348:	68fa      	ldr	r2, [r7, #12]
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	4413      	add	r3, r2
 800034e:	3305      	adds	r3, #5
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	461a      	mov	r2, r3
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	4413      	add	r3, r2
 8000358:	617b      	str	r3, [r7, #20]
      buf += 2;
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3302      	adds	r3, #2
 800035e:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < dataLength; i++) {
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	3301      	adds	r3, #1
 8000364:	613b      	str	r3, [r7, #16]
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	693a      	ldr	r2, [r7, #16]
 800036a:	429a      	cmp	r2, r3
 800036c:	dbe1      	blt.n	8000332 <dataHEXDecrypt32BitBuf+0x9a>
    }
  //}
  crc = (((crc ^ 0xff) + 1) & 0xff);
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8000374:	3301      	adds	r3, #1
 8000376:	b2db      	uxtb	r3, r3
 8000378:	617b      	str	r3, [r7, #20]
  if (crc - chars2int(buf)) return DATA_ERROR;
 800037a:	68b8      	ldr	r0, [r7, #8]
 800037c:	f7ff ff3e 	bl	80001fc <chars2int>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	4293      	cmp	r3, r2
 8000388:	d001      	beq.n	800038e <dataHEXDecrypt32BitBuf+0xf6>
 800038a:	2300      	movs	r3, #0
 800038c:	e000      	b.n	8000390 <dataHEXDecrypt32BitBuf+0xf8>
  else return DATA_OK;
 800038e:	2305      	movs	r3, #5
}
 8000390:	4618      	mov	r0, r3
 8000392:	3718      	adds	r7, #24
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b0a0      	sub	sp, #128	; 0x80
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039e:	f000 fd9b 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a2:	f000 fad5 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a6:	f000 fb67 	bl	8000a78 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80003aa:	f000 fb11 	bl	80009d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003ae:	f000 fb39 	bl	8000a24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("rcc->csr = %lu\n", RCC->CSR);
 80003b2:	4bc2      	ldr	r3, [pc, #776]	; (80006bc <main+0x324>)
 80003b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b6:	4619      	mov	r1, r3
 80003b8:	48c1      	ldr	r0, [pc, #772]	; (80006c0 <main+0x328>)
 80003ba:	f002 f9bb 	bl	8002734 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    if (*(__IO uint32_t*)BOOTLOADER_FLAG_ADDRESS == BOOTLOADER) { //если в памяти 'BOOTLOADER', то начинаем процесс прошивки 08018C00
 80003be:	4bc1      	ldr	r3, [pc, #772]	; (80006c4 <main+0x32c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b09      	cmp	r3, #9
 80003c4:	f040 8258 	bne.w	8000878 <main+0x4e0>
    	uint8_t value[46]; //значение, считанное с uart
    	uint8_t dataLength = dataCreate((char*)value, BOOTLOADER, 0); //готовим данные для отмашки к началу передачи прошивки от esp
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	2109      	movs	r1, #9
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff fee2 	bl	8000198 <dataCreate>
 80003d4:	4603      	mov	r3, r0
 80003d6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
    	//	  uint8_t lineLength;
    	//		  uint8_t dataSense;
		size_t	currentAddress = 0x08000000, //адрес, в который пишем сейчас. нужен главным образом для хранения расширенного адреса
 80003da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003de:	67fb      	str	r3, [r7, #124]	; 0x7c
			currentMinAddress = 0x0, //адрес начала блока стертой памяти (в которую сейчас пишем)
 80003e0:	2300      	movs	r3, #0
 80003e2:	67bb      	str	r3, [r7, #120]	; 0x78
			currentMaxAddress = 0x0; //конец блока стертой памяти
 80003e4:	2300      	movs	r3, #0
 80003e6:	677b      	str	r3, [r7, #116]	; 0x74
    	HEXData hex; //структура для расшифрованного пакета c hex-данных
    	union { //структура для записи данных в память (для HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data))
    		uint8_t *buf8;
    		uint32_t* buf32;
    	} hexBuf;
    	hexBuf.buf8 = hex.buf; //вносим адрес буфера с данными
 80003e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003ec:	3305      	adds	r3, #5
 80003ee:	647b      	str	r3, [r7, #68]	; 0x44
    	static uint32_t PAGEError; // = 0xFFFFFFFF;
    	FLASH_EraseInitTypeDef EraseInitStruct; //структура для стирания блока памяти
    	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; //стираем постранично
 80003f0:	2300      	movs	r3, #0
 80003f2:	637b      	str	r3, [r7, #52]	; 0x34
    	EraseInitStruct.NbPages = 1; //по одной странице за раз
 80003f4:	2301      	movs	r3, #1
 80003f6:	643b      	str	r3, [r7, #64]	; 0x40
    	HAL_FLASH_Unlock();
 80003f8:	f000 ff90 	bl	800131c <HAL_FLASH_Unlock>
    	EraseInitStruct.PageAddress = currentMinAddress; //стираем первую страницу
 80003fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80003fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    	if (HAL_UART_Transmit(&huart1, value, dataLength, 200) == HAL_OK) { //отправляем запрос на начало передачи прошивки
 8000400:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000404:	b29a      	uxth	r2, r3
 8000406:	1d39      	adds	r1, r7, #4
 8000408:	23c8      	movs	r3, #200	; 0xc8
 800040a:	48af      	ldr	r0, [pc, #700]	; (80006c8 <main+0x330>)
 800040c:	f001 ff53 	bl	80022b6 <HAL_UART_Transmit>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	f040 822e 	bne.w	8000874 <main+0x4dc>
    		uint8_t counter = 0x5;
 8000418:	2305      	movs	r3, #5
 800041a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        	while ((HAL_GPIO_ReadPin(GPIOC, B1_Pin) != GPIO_PIN_RESET) //ждем нажатия кнопки, мигая диодом
 800041e:	e015      	b.n	800044c <main+0xb4>
        			&& (--counter)) {
        		printf("counter");
 8000420:	48aa      	ldr	r0, [pc, #680]	; (80006cc <main+0x334>)
 8000422:	f002 f987 	bl	8002734 <iprintf>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042c:	48a8      	ldr	r0, [pc, #672]	; (80006d0 <main+0x338>)
 800042e:	f001 faa0 	bl	8001972 <HAL_GPIO_WritePin>
        		HAL_Delay(1000);
 8000432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000436:	f000 fdcf 	bl	8000fd8 <HAL_Delay>
        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000440:	48a3      	ldr	r0, [pc, #652]	; (80006d0 <main+0x338>)
 8000442:	f001 fa96 	bl	8001972 <HAL_GPIO_WritePin>
        		HAL_Delay(200);
 8000446:	20c8      	movs	r0, #200	; 0xc8
 8000448:	f000 fdc6 	bl	8000fd8 <HAL_Delay>
        	while ((HAL_GPIO_ReadPin(GPIOC, B1_Pin) != GPIO_PIN_RESET) //ждем нажатия кнопки, мигая диодом
 800044c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000450:	48a0      	ldr	r0, [pc, #640]	; (80006d4 <main+0x33c>)
 8000452:	f001 fa77 	bl	8001944 <HAL_GPIO_ReadPin>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d008      	beq.n	800046e <main+0xd6>
        			&& (--counter)) {
 800045c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000460:	3b01      	subs	r3, #1
 8000462:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8000466:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1d8      	bne.n	8000420 <main+0x88>
        	}
    		printf("\n end counter");
 800046e:	489a      	ldr	r0, [pc, #616]	; (80006d8 <main+0x340>)
 8000470:	f002 f960 	bl	8002734 <iprintf>
        	if (counter) { //если нажата кнопка, мигаем и переходим к прошивке
 8000474:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000478:	2b00      	cmp	r3, #0
 800047a:	d024      	beq.n	80004c6 <main+0x12e>
       			counter = 0xf;
 800047c:	230f      	movs	r3, #15
 800047e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
       			for (int i = 0; i < 5; i++) {
 8000482:	2300      	movs	r3, #0
 8000484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000486:	e017      	b.n	80004b8 <main+0x120>
       	    		printf("\ncounter 2");
 8000488:	4894      	ldr	r0, [pc, #592]	; (80006dc <main+0x344>)
 800048a:	f002 f953 	bl	8002734 <iprintf>
       				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000494:	488e      	ldr	r0, [pc, #568]	; (80006d0 <main+0x338>)
 8000496:	f001 fa6c 	bl	8001972 <HAL_GPIO_WritePin>
           			HAL_Delay(50);
 800049a:	2032      	movs	r0, #50	; 0x32
 800049c:	f000 fd9c 	bl	8000fd8 <HAL_Delay>
           			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a6:	488a      	ldr	r0, [pc, #552]	; (80006d0 <main+0x338>)
 80004a8:	f001 fa63 	bl	8001972 <HAL_GPIO_WritePin>
           			HAL_Delay(10);
 80004ac:	200a      	movs	r0, #10
 80004ae:	f000 fd93 	bl	8000fd8 <HAL_Delay>
       			for (int i = 0; i < 5; i++) {
 80004b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004b4:	3301      	adds	r3, #1
 80004b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80004b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	dde4      	ble.n	8000488 <main+0xf0>
       			}
       			flag = BOOTLOADER;
 80004be:	4b88      	ldr	r3, [pc, #544]	; (80006e0 <main+0x348>)
 80004c0:	2209      	movs	r2, #9
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	e002      	b.n	80004cc <main+0x134>
        	} else {
        		flag = FLASH_DONE;
 80004c6:	4b86      	ldr	r3, [pc, #536]	; (80006e0 <main+0x348>)
 80004c8:	220e      	movs	r2, #14
 80004ca:	701a      	strb	r2, [r3, #0]
        	}
    		printf("\n end counter 2");
 80004cc:	4885      	ldr	r0, [pc, #532]	; (80006e4 <main+0x34c>)
 80004ce:	f002 f931 	bl	8002734 <iprintf>

    		while ((HAL_UART_Receive(&huart1, value, 1, 10000) == HAL_OK) //читаем первый байт пакета
 80004d2:	e1b3      	b.n	800083c <main+0x4a4>
    				&& (--counter)
					&& (flag != FLASH_DONE)
					&& (flag != CRITICAL_ERROR)) {
    			//printf("\nwhile ((HAL_UART_Receive(&huart1, value, 1, 2000) == HAL_OK)");
    			if (value[0] == ':') { //ищем начало hex-строки
 80004d4:	793b      	ldrb	r3, [r7, #4]
 80004d6:	2b3a      	cmp	r3, #58	; 0x3a
 80004d8:	f040 81b0 	bne.w	800083c <main+0x4a4>
    				//printf("\nif (value[0] == ':')");
    				if (HAL_UART_Receive(&huart1, &value[1], 2, 10000) == HAL_OK) {//читаем длину hex-строки
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	1c59      	adds	r1, r3, #1
 80004e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80004e4:	2202      	movs	r2, #2
 80004e6:	4878      	ldr	r0, [pc, #480]	; (80006c8 <main+0x330>)
 80004e8:	f001 ff77 	bl	80023da <HAL_UART_Receive>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	f040 818c 	bne.w	800080c <main+0x474>
    					//printf("\nif (HAL_UART_Receive(&huart1, &value[1], 2, 2000) == HAL_OK) {//читаем длину hex-строки");
    					dataLength = chars2int((char*)&value[1]); //if ((dataLength = chars2int((char*)&value[1])) != DATA_ERROR) {
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	3301      	adds	r3, #1
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fe7f 	bl	80001fc <chars2int>
 80004fe:	4603      	mov	r3, r0
 8000500:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
        					//printf("\nif ((dataLength = chars2int((char*)&value[1])) != DATA_ERROR) {");
    						if (HAL_UART_Receive(&huart1, &value[3], ((dataLength << 1) + 8), 10000) == HAL_OK) { //читаем hex-строку
 8000504:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000508:	b29b      	uxth	r3, r3
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	b29b      	uxth	r3, r3
 800050e:	3308      	adds	r3, #8
 8000510:	b29a      	uxth	r2, r3
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	1cd9      	adds	r1, r3, #3
 8000516:	f242 7310 	movw	r3, #10000	; 0x2710
 800051a:	486b      	ldr	r0, [pc, #428]	; (80006c8 <main+0x330>)
 800051c:	f001 ff5d 	bl	80023da <HAL_UART_Receive>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	f040 816b 	bne.w	80007fe <main+0x466>
    							//printf("\nif (HAL_UART_Receive(&huart1, &value[3], ((dataLength << 1) + 8), 2000) == HAL_OK) { //читаем hex-строку");
    							if (dataHEXDecrypt32BitBuf(&hex, (char*)value, dataLength) != DATA_ERROR) { //далее исходим из уверенности, что данные доставлены без повреждений
 8000528:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 800052c:	1d39      	adds	r1, r7, #4
 800052e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff feb0 	bl	8000298 <dataHEXDecrypt32BitBuf>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	f000 8158 	beq.w	80007f0 <main+0x458>
    	    						//printf("\nif (dataHEXDecrypt(&hex, (char*)value, dataLength) != DATA_ERROR) {");
    	    						switch (hex.dataType) {
 8000540:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000544:	2b05      	cmp	r3, #5
 8000546:	f200 8167 	bhi.w	8000818 <main+0x480>
 800054a:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <main+0x1b8>)
 800054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000550:	08000569 	.word	0x08000569
 8000554:	08000735 	.word	0x08000735
 8000558:	08000819 	.word	0x08000819
 800055c:	08000819 	.word	0x08000819
 8000560:	08000701 	.word	0x08000701
 8000564:	080007dd 	.word	0x080007dd
    	    						case 0 : { //пишем данные
    	    							//printf("\ncase 0 :\n");
    	    							//for (int i=0; i<dataLength; i++) printf("%x", hex.buf[i]);
    	    							//printf("\n");
    	    							currentAddress = (currentAddress & 0xffff0000) + hex.address;
 8000568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	041b      	lsls	r3, r3, #16
 800056e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000572:	4413      	add	r3, r2
 8000574:	67fb      	str	r3, [r7, #124]	; 0x7c
    	    							//printf("\ncurrentAddress=%x; currentAddress + dataLength=%x; upA=%x; ", currentAddress, (currentAddress + dataLength), upperAddress);
    	    							if ((currentAddress >= FIRMWARE_START_ADDRESS) && ((currentAddress + dataLength) < UPPER_ADDRESS)) { //проверяем лежит ли полученный пакет в пределах допустимой для записи памяти
 8000576:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000578:	4a5b      	ldr	r2, [pc, #364]	; (80006e8 <main+0x350>)
 800057a:	4293      	cmp	r3, r2
 800057c:	f0c0 809a 	bcc.w	80006b4 <main+0x31c>
 8000580:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 8000584:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000586:	4413      	add	r3, r2
 8000588:	4a58      	ldr	r2, [pc, #352]	; (80006ec <main+0x354>)
 800058a:	4293      	cmp	r3, r2
 800058c:	f080 8092 	bcs.w	80006b4 <main+0x31c>
    	    								//printf("\ncurrA=%x; currentMinAddress=%x; currentMaxAddress=%x; ", currentAddress, currentMinAddress, currentMaxAddress);
    	    								if (currentAddress < currentMinAddress) {//|| (currentAddress > currentMaxAddress)) { //данные идут не последовательно
 8000590:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000594:	429a      	cmp	r2, r3
 8000596:	d206      	bcs.n	80005a6 <main+0x20e>
    	    									printf("--------error------------ if ((currentAddress < currentMinAddress)) {");
 8000598:	4855      	ldr	r0, [pc, #340]	; (80006f0 <main+0x358>)
 800059a:	f002 f8cb 	bl	8002734 <iprintf>
    	    									flag = CRITICAL_ERROR;
 800059e:	4b50      	ldr	r3, [pc, #320]	; (80006e0 <main+0x348>)
 80005a0:	220f      	movs	r2, #15
 80005a2:	701a      	strb	r2, [r3, #0]
    	    									break;
 80005a4:	e138      	b.n	8000818 <main+0x480>
    										} else {
    											if (currentAddress > currentMaxAddress) {
 80005a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80005a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d91e      	bls.n	80005ec <main+0x254>
        											currentMinAddress = ((currentAddress >> 10) << 10); //адрес страницы для стирания - содержит currentAddress
 80005ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005b0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80005b4:	f023 0303 	bic.w	r3, r3, #3
 80005b8:	67bb      	str	r3, [r7, #120]	; 0x78
        											currentMaxAddress = currentMinAddress + PAGE_SIZE;
 80005ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80005c0:	677b      	str	r3, [r7, #116]	; 0x74
        											EraseInitStruct.PageAddress = currentMinAddress; //стираем страницу
 80005c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        											printf("\n!!!HAL_FLASHEx_Erase currA=%x; currentMinAddress=%x; currentMaxAddress=%x; ", currentAddress, currentMinAddress, currentMaxAddress);
 80005c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80005ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80005cc:	4849      	ldr	r0, [pc, #292]	; (80006f4 <main+0x35c>)
 80005ce:	f002 f8b1 	bl	8002734 <iprintf>
        											if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 80005d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005d6:	4948      	ldr	r1, [pc, #288]	; (80006f8 <main+0x360>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 ff87 	bl	80014ec <HAL_FLASHEx_Erase>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <main+0x254>
        												flag = CRITICAL_ERROR;
 80005e4:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <main+0x348>)
 80005e6:	220f      	movs	r2, #15
 80005e8:	701a      	strb	r2, [r3, #0]
        												break;
 80005ea:	e115      	b.n	8000818 <main+0x480>
        											}
    											}
    											if ((currentAddress + dataLength) >= currentMaxAddress) { //выходят данные для записи за пределы стертой страницы?
 80005ec:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 80005f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005f2:	4413      	add	r3, r2
 80005f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d81d      	bhi.n	8000636 <main+0x29e>
    												currentMinAddress = ((currentAddress >> 10) + 1) << 10; //адрес страницы для стирания - содержит (currentAddress + dataLength)
 80005fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005fc:	0a9b      	lsrs	r3, r3, #10
 80005fe:	3301      	adds	r3, #1
 8000600:	029b      	lsls	r3, r3, #10
 8000602:	67bb      	str	r3, [r7, #120]	; 0x78
    												currentMaxAddress = currentMinAddress + PAGE_SIZE;
 8000604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800060a:	677b      	str	r3, [r7, #116]	; 0x74
    												EraseInitStruct.PageAddress = currentMinAddress; //стираем страницу
 800060c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
    												printf("\n***HAL_FLASHEx_Erase currA=%x; currentMinAddress=%x; currentMaxAddress=%x; ", currentAddress, currentMinAddress, currentMaxAddress);
 8000610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000612:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000614:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000616:	4839      	ldr	r0, [pc, #228]	; (80006fc <main+0x364>)
 8000618:	f002 f88c 	bl	8002734 <iprintf>
    												if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 800061c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000620:	4935      	ldr	r1, [pc, #212]	; (80006f8 <main+0x360>)
 8000622:	4618      	mov	r0, r3
 8000624:	f000 ff62 	bl	80014ec <HAL_FLASHEx_Erase>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d003      	beq.n	8000636 <main+0x29e>
    													flag = CRITICAL_ERROR;
 800062e:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <main+0x348>)
 8000630:	220f      	movs	r2, #15
 8000632:	701a      	strb	r2, [r3, #0]
    													break;
 8000634:	e0f0      	b.n	8000818 <main+0x480>
    												}
    											}
    										}
    	    								//если дошди до этого места без ошибок, начинаем запись
    	    								for (uint8_t i = 0; i < hex.dataSize; i+=4) {
 8000636:	2300      	movs	r3, #0
 8000638:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800063c:	e01a      	b.n	8000674 <main+0x2dc>
    	    									if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (currentAddress + i), *hexBuf.buf32) != HAL_OK) {
 800063e:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8000642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000644:	18d1      	adds	r1, r2, r3
 8000646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	f04f 0300 	mov.w	r3, #0
 8000650:	2002      	movs	r0, #2
 8000652:	f000 fdf3 	bl	800123c <HAL_FLASH_Program>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d003      	beq.n	8000664 <main+0x2cc>
    	    										flag = CRITICAL_ERROR;
 800065c:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <main+0x348>)
 800065e:	220f      	movs	r2, #15
 8000660:	701a      	strb	r2, [r3, #0]
    									  			break;
 8000662:	e00d      	b.n	8000680 <main+0x2e8>
    									  		}
    	    									hexBuf.buf32++;
 8000664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000666:	3304      	adds	r3, #4
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
    	    								for (uint8_t i = 0; i < hex.dataSize; i+=4) {
 800066a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800066e:	3304      	adds	r3, #4
 8000670:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000674:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000678:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800067c:	429a      	cmp	r2, r3
 800067e:	d3de      	bcc.n	800063e <main+0x2a6>
    	    								}
    	    								//printf("\nHAL_FLASH_Program from=%x to=%x; size=%d;", currentAddress, currentAddress+dataLength, dataLength);
        	    			        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000686:	4812      	ldr	r0, [pc, #72]	; (80006d0 <main+0x338>)
 8000688:	f001 f973 	bl	8001972 <HAL_GPIO_WritePin>
        	    			        		HAL_Delay(10);
 800068c:	200a      	movs	r0, #10
 800068e:	f000 fca3 	bl	8000fd8 <HAL_Delay>
        	    			        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <main+0x338>)
 800069a:	f001 f96a 	bl	8001972 <HAL_GPIO_WritePin>
    	    								counter = 0xf;
 800069e:	230f      	movs	r3, #15
 80006a0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	    	    							flag = DATA_OK;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <main+0x348>)
 80006a6:	2205      	movs	r2, #5
 80006a8:	701a      	strb	r2, [r3, #0]
  		    	    						hexBuf.buf8 = hex.buf;
 80006aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ae:	3305      	adds	r3, #5
 80006b0:	647b      	str	r3, [r7, #68]	; 0x44
    	    							} else { //if ((currentAddress >= lowerAddress) && ((currentAddress + dataLength) < upperAddress)) { //проверяем лежит ли полученный пакет в пределах допустимой для записи памяти
    	    								flag = CRITICAL_ERROR;
    	    							}
    	    							break;
 80006b2:	e0b1      	b.n	8000818 <main+0x480>
    	    								flag = CRITICAL_ERROR;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <main+0x348>)
 80006b6:	220f      	movs	r2, #15
 80006b8:	701a      	strb	r2, [r3, #0]
    	    							break;
 80006ba:	e0ad      	b.n	8000818 <main+0x480>
 80006bc:	40021000 	.word	0x40021000
 80006c0:	0800360c 	.word	0x0800360c
 80006c4:	08018c00 	.word	0x08018c00
 80006c8:	200000a4 	.word	0x200000a4
 80006cc:	0800361c 	.word	0x0800361c
 80006d0:	40010c00 	.word	0x40010c00
 80006d4:	40011000 	.word	0x40011000
 80006d8:	08003624 	.word	0x08003624
 80006dc:	08003634 	.word	0x08003634
 80006e0:	20000000 	.word	0x20000000
 80006e4:	08003640 	.word	0x08003640
 80006e8:	08005c00 	.word	0x08005c00
 80006ec:	08018800 	.word	0x08018800
 80006f0:	08003650 	.word	0x08003650
 80006f4:	08003698 	.word	0x08003698
 80006f8:	20000094 	.word	0x20000094
 80006fc:	080036e8 	.word	0x080036e8
    	    						} //case 0 : { //пишем данные
    	    						case 4 : { //пишем расширенный адрес
    	    							currentAddress = hex.buf[0];
 8000700:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000704:	67fb      	str	r3, [r7, #124]	; 0x7c
    	    							currentAddress <<= 8;
 8000706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000708:	021b      	lsls	r3, r3, #8
 800070a:	67fb      	str	r3, [r7, #124]	; 0x7c
    	    							currentAddress += hex.buf[1];
 800070c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000710:	461a      	mov	r2, r3
 8000712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000714:	4413      	add	r3, r2
 8000716:	67fb      	str	r3, [r7, #124]	; 0x7c
    	    							currentAddress <<= 16;
 8000718:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800071a:	041b      	lsls	r3, r3, #16
 800071c:	67fb      	str	r3, [r7, #124]	; 0x7c
    	    							printf("\ncase : 4; currA = %x", currentAddress);
 800071e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000720:	487d      	ldr	r0, [pc, #500]	; (8000918 <main+0x580>)
 8000722:	f002 f807 	bl	8002734 <iprintf>
    	    							counter = 0xf;
 8000726:	230f      	movs	r3, #15
 8000728:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    	    							flag = DATA_OK;
 800072c:	4b7b      	ldr	r3, [pc, #492]	; (800091c <main+0x584>)
 800072e:	2205      	movs	r2, #5
 8000730:	701a      	strb	r2, [r3, #0]
    	    							break;
 8000732:	e071      	b.n	8000818 <main+0x480>
    	    						}
    	    						case 1 : { //конец файла, завершаем запись
    	    							printf("\ncase 1 :");
 8000734:	487a      	ldr	r0, [pc, #488]	; (8000920 <main+0x588>)
 8000736:	f001 fffd 	bl	8002734 <iprintf>
										EraseInitStruct.PageAddress = BOOTLOADER_FLAG_ADDRESS; //стираем страницу
 800073a:	4b7a      	ldr	r3, [pc, #488]	; (8000924 <main+0x58c>)
 800073c:	63fb      	str	r3, [r7, #60]	; 0x3c
										printf("\n***HAL_FLASHEx_Erase currA=%x; currentMinAddress=%x; currentMaxAddress=%x; ", currentAddress, currentMinAddress, currentMaxAddress);
 800073e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000740:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000742:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000744:	4878      	ldr	r0, [pc, #480]	; (8000928 <main+0x590>)
 8000746:	f001 fff5 	bl	8002734 <iprintf>
										if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 800074a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800074e:	4977      	ldr	r1, [pc, #476]	; (800092c <main+0x594>)
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fecb 	bl	80014ec <HAL_FLASHEx_Erase>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d003      	beq.n	8000764 <main+0x3cc>
											flag = CRITICAL_ERROR;
 800075c:	4b6f      	ldr	r3, [pc, #444]	; (800091c <main+0x584>)
 800075e:	220f      	movs	r2, #15
 8000760:	701a      	strb	r2, [r3, #0]
											break;
 8000762:	e059      	b.n	8000818 <main+0x480>
										}
						        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076a:	4871      	ldr	r0, [pc, #452]	; (8000930 <main+0x598>)
 800076c:	f001 f901 	bl	8001972 <HAL_GPIO_WritePin>
						        		HAL_Delay(2000);
 8000770:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000774:	f000 fc30 	bl	8000fd8 <HAL_Delay>
						        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077e:	486c      	ldr	r0, [pc, #432]	; (8000930 <main+0x598>)
 8000780:	f001 f8f7 	bl	8001972 <HAL_GPIO_WritePin>
						        		HAL_Delay(1000);
 8000784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000788:	f000 fc26 	bl	8000fd8 <HAL_Delay>
						        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000792:	4867      	ldr	r0, [pc, #412]	; (8000930 <main+0x598>)
 8000794:	f001 f8ed 	bl	8001972 <HAL_GPIO_WritePin>
						        		HAL_Delay(2000);
 8000798:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800079c:	f000 fc1c 	bl	8000fd8 <HAL_Delay>
						        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a6:	4862      	ldr	r0, [pc, #392]	; (8000930 <main+0x598>)
 80007a8:	f001 f8e3 	bl	8001972 <HAL_GPIO_WritePin>
						        		HAL_Delay(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f000 fc12 	bl	8000fd8 <HAL_Delay>
						        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ba:	485d      	ldr	r0, [pc, #372]	; (8000930 <main+0x598>)
 80007bc:	f001 f8d9 	bl	8001972 <HAL_GPIO_WritePin>
						        		HAL_Delay(2000);
 80007c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007c4:	f000 fc08 	bl	8000fd8 <HAL_Delay>
						        		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ce:	4858      	ldr	r0, [pc, #352]	; (8000930 <main+0x598>)
 80007d0:	f001 f8cf 	bl	8001972 <HAL_GPIO_WritePin>
    	    							flag = FLASH_DONE;
 80007d4:	4b51      	ldr	r3, [pc, #324]	; (800091c <main+0x584>)
 80007d6:	220e      	movs	r2, #14
 80007d8:	701a      	strb	r2, [r3, #0]
    	    							break;
 80007da:	e01d      	b.n	8000818 <main+0x480>
    	    						}
    	    						case 5 : {
    	    							printf("\ncase : 5");
 80007dc:	4855      	ldr	r0, [pc, #340]	; (8000934 <main+0x59c>)
 80007de:	f001 ffa9 	bl	8002734 <iprintf>
    	    							counter = 0xf;
 80007e2:	230f      	movs	r3, #15
 80007e4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    	    							flag = DATA_OK;
 80007e8:	4b4c      	ldr	r3, [pc, #304]	; (800091c <main+0x584>)
 80007ea:	2205      	movs	r2, #5
 80007ec:	701a      	strb	r2, [r3, #0]
    	    							break;
 80007ee:	e013      	b.n	8000818 <main+0x480>
    	    						}
    	    						} //switch (hex.dataType) {
    							} else { //if (dataHEXDecrypt32BitBuf(&hex, (char*)value, dataLength) != DATA_ERROR) { //далее исходим из уверенности, что данные доставлены без повреждений
    	    						printf("\n---error--- if (dataHEXDecrypt(&hex, (char*)value, dataLength) != DATA_ERROR) {");
 80007f0:	4851      	ldr	r0, [pc, #324]	; (8000938 <main+0x5a0>)
 80007f2:	f001 ff9f 	bl	8002734 <iprintf>
    	    						flag = DATA_ERROR;
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <main+0x584>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	e00c      	b.n	8000818 <main+0x480>
    							}
    						} else { //if (HAL_UART_Receive(&huart1, &value[3], ((dataLength << 1) + 8), 10000) == HAL_OK) { //читаем hex-строку
        						printf("\n---error--- if (HAL_UART_Receive(&huart1, &value[3], ((dataLength << 1) + 8), 2000) == HAL_OK) { //читаем hex-строку");
 80007fe:	484f      	ldr	r0, [pc, #316]	; (800093c <main+0x5a4>)
 8000800:	f001 ff98 	bl	8002734 <iprintf>
        						flag = DATA_ERROR;
 8000804:	4b45      	ldr	r3, [pc, #276]	; (800091c <main+0x584>)
 8000806:	2200      	movs	r2, #0
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e005      	b.n	8000818 <main+0x480>
    						}
    				} else { //if (HAL_UART_Receive(&huart1, &value[1], 2, 2000) == HAL_OK) {//читаем длину hex-строки
						printf("\n---error--- if (HAL_UART_Receive(&huart1, &value[1], 2, 2000) == HAL_OK) {//читаем длину hex-строки");
 800080c:	484c      	ldr	r0, [pc, #304]	; (8000940 <main+0x5a8>)
 800080e:	f001 ff91 	bl	8002734 <iprintf>
    					flag = DATA_ERROR;
 8000812:	4b42      	ldr	r3, [pc, #264]	; (800091c <main+0x584>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
    				}
    				//printf("\nsend flag = %u\n", flag);
					//for (int i=0; i<dataLength; i++) printf("%x", hex.buf[i]);
					//printf("\n");
    				dataLength = dataCreate((char*)value, flag, 0);
 8000818:	4b40      	ldr	r3, [pc, #256]	; (800091c <main+0x584>)
 800081a:	7819      	ldrb	r1, [r3, #0]
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fcb9 	bl	8000198 <dataCreate>
 8000826:	4603      	mov	r3, r0
 8000828:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
    				HAL_UART_Transmit(&huart1, value, dataLength, 200);
 800082c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000830:	b29a      	uxth	r2, r3
 8000832:	1d39      	adds	r1, r7, #4
 8000834:	23c8      	movs	r3, #200	; 0xc8
 8000836:	4843      	ldr	r0, [pc, #268]	; (8000944 <main+0x5ac>)
 8000838:	f001 fd3d 	bl	80022b6 <HAL_UART_Transmit>
    		while ((HAL_UART_Receive(&huart1, value, 1, 10000) == HAL_OK) //читаем первый байт пакета
 800083c:	1d39      	adds	r1, r7, #4
 800083e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000842:	2201      	movs	r2, #1
 8000844:	483f      	ldr	r0, [pc, #252]	; (8000944 <main+0x5ac>)
 8000846:	f001 fdc8 	bl	80023da <HAL_UART_Receive>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d111      	bne.n	8000874 <main+0x4dc>
    				&& (--counter)
 8000850:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000854:	3b01      	subs	r3, #1
 8000856:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800085a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800085e:	2b00      	cmp	r3, #0
 8000860:	d008      	beq.n	8000874 <main+0x4dc>
					&& (flag != FLASH_DONE)
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <main+0x584>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b0e      	cmp	r3, #14
 8000868:	d004      	beq.n	8000874 <main+0x4dc>
					&& (flag != CRITICAL_ERROR)) {
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <main+0x584>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b0f      	cmp	r3, #15
 8000870:	f47f ae30 	bne.w	80004d4 <main+0x13c>
    			} //if (value[0] == ':') { //ищем начало hex-строки
    		} //while ((HAL_UART_Receive(&huart1, value, 1, 10000) == HAL_OK) //читаем первый байт пакета
    	} //if (HAL_UART_Transmit(&huart1, value, dataLength, 200) == HAL_OK) { //отправляем запрос на начало передачи прошивки
    	HAL_FLASH_Lock();
 8000874:	f000 fd78 	bl	8001368 <HAL_FLASH_Lock>
    } //if (*(__IO uint32_t*)0x08018C00 == 9) { //если в памяти '9', то начинаем процесс прошивки
	HAL_Delay(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087c:	f000 fbac 	bl	8000fd8 <HAL_Delay>
    if (flag != CRITICAL_ERROR) {
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <main+0x584>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d00f      	beq.n	80008a8 <main+0x510>
    	void (*GoToFirmware)(void);
		GoToFirmware = (void (*)(void)) *((volatile uint32_t*)(FIRMWARE_START_ADDRESS + 4));
 8000888:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <main+0x5b0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	667b      	str	r3, [r7, #100]	; 0x64
		HAL_DeInit();
 800088e:	f000 fb39 	bl	8000f04 <HAL_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000892:	b672      	cpsid	i
}
 8000894:	bf00      	nop
		__disable_irq();
		__set_MSP(*((volatile uint32_t*)FIRMWARE_START_ADDRESS));
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <main+0x5b4>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	663b      	str	r3, [r7, #96]	; 0x60
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800089c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800089e:	f383 8808 	msr	MSP, r3
}
 80008a2:	bf00      	nop
		GoToFirmware();
 80008a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a6:	4798      	blx	r3
	}


  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ae:	4820      	ldr	r0, [pc, #128]	; (8000930 <main+0x598>)
 80008b0:	f001 f85f 	bl	8001972 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008b4:	2064      	movs	r0, #100	; 0x64
 80008b6:	f000 fb8f 	bl	8000fd8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c0:	481b      	ldr	r0, [pc, #108]	; (8000930 <main+0x598>)
 80008c2:	f001 f856 	bl	8001972 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008c6:	2064      	movs	r0, #100	; 0x64
 80008c8:	f000 fb86 	bl	8000fd8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <main+0x598>)
 80008d4:	f001 f84d 	bl	8001972 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008d8:	2064      	movs	r0, #100	; 0x64
 80008da:	f000 fb7d 	bl	8000fd8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e4:	4812      	ldr	r0, [pc, #72]	; (8000930 <main+0x598>)
 80008e6:	f001 f844 	bl	8001972 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008ea:	2064      	movs	r0, #100	; 0x64
 80008ec:	f000 fb74 	bl	8000fd8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <main+0x598>)
 80008f8:	f001 f83b 	bl	8001972 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80008fc:	2064      	movs	r0, #100	; 0x64
 80008fe:	f000 fb6b 	bl	8000fd8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <main+0x598>)
 800090a:	f001 f832 	bl	8001972 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800090e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000912:	f000 fb61 	bl	8000fd8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000916:	e7c7      	b.n	80008a8 <main+0x510>
 8000918:	08003738 	.word	0x08003738
 800091c:	20000000 	.word	0x20000000
 8000920:	08003750 	.word	0x08003750
 8000924:	08018c00 	.word	0x08018c00
 8000928:	080036e8 	.word	0x080036e8
 800092c:	20000094 	.word	0x20000094
 8000930:	40010c00 	.word	0x40010c00
 8000934:	0800375c 	.word	0x0800375c
 8000938:	08003768 	.word	0x08003768
 800093c:	080037bc 	.word	0x080037bc
 8000940:	08003840 	.word	0x08003840
 8000944:	200000a4 	.word	0x200000a4
 8000948:	08005c04 	.word	0x08005c04
 800094c:	08005c00 	.word	0x08005c00

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b090      	sub	sp, #64	; 0x40
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	2228      	movs	r2, #40	; 0x28
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fee0 	bl	8002724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000976:	2301      	movs	r3, #1
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097a:	2310      	movs	r3, #16
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000982:	2300      	movs	r3, #0
 8000984:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000986:	2300      	movs	r3, #0
 8000988:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f82a 	bl	80019e8 <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800099a:	f000 f90f 	bl	8000bbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	230f      	movs	r3, #15
 80009a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2302      	movs	r3, #2
 80009a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fa95 	bl	8001ee8 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009c4:	f000 f8fa 	bl	8000bbc <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3740      	adds	r7, #64	; 0x40
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_USART1_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1200;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009dc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80009e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART1_UART_Init+0x4c>)
 8000a08:	f001 fc08 	bl	800221c <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f000 f8d3 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000a4 	.word	0x200000a4
 8000a20:	40013800 	.word	0x40013800

08000a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <MX_USART2_UART_Init+0x50>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	f001 fbde 	bl	800221c <HAL_UART_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a66:	f000 f8a9 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000e8 	.word	0x200000e8
 8000a74:	40004400 	.word	0x40004400

08000a78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a37      	ldr	r2, [pc, #220]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa4:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a31      	ldr	r2, [pc, #196]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000aaa:	f043 0320 	orr.w	r3, r3, #32
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0320 	and.w	r3, r3, #32
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a2b      	ldr	r2, [pc, #172]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_GPIO_Init+0xf8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2120      	movs	r1, #32
 8000af0:	4820      	ldr	r0, [pc, #128]	; (8000b74 <MX_GPIO_Init+0xfc>)
 8000af2:	f000 ff3e 	bl	8001972 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afc:	481e      	ldr	r0, [pc, #120]	; (8000b78 <MX_GPIO_Init+0x100>)
 8000afe:	f000 ff38 	bl	8001972 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_GPIO_Init+0x104>)
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <MX_GPIO_Init+0x108>)
 8000b18:	f000 fd90 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4810      	ldr	r0, [pc, #64]	; (8000b74 <MX_GPIO_Init+0xfc>)
 8000b34:	f000 fd82 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <MX_GPIO_Init+0x100>)
 8000b52:	f000 fd73 	bl	800163c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2028      	movs	r0, #40	; 0x28
 8000b5c:	f000 fb37 	bl	80011ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b60:	2028      	movs	r0, #40	; 0x28
 8000b62:	f000 fb50 	bl	8001206 <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40010c00 	.word	0x40010c00
 8000b7c:	10110000 	.word	0x10110000
 8000b80:	40011000 	.word	0x40011000

08000b84 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	//int i = 1;
	for (int i = 0; i < len; i++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e009      	b.n	8000baa <_write+0x26>
		ITM_SendChar((*ptr++));
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fad4 	bl	800014c <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dbf1      	blt.n	8000b96 <_write+0x12>
	}
	return len;
 8000bb2:	687b      	ldr	r3, [r7, #4]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>
	...

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x5c>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x5c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_MspInit+0x60>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_MspInit+0x60>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000
 8000c28:	40010000 	.word	0x40010000

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <HAL_UART_MspInit+0xe0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d132      	bne.n	8000cb2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a29      	ldr	r2, [pc, #164]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c6a:	f043 0304 	orr.w	r3, r3, #4
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4820      	ldr	r0, [pc, #128]	; (8000d14 <HAL_UART_MspInit+0xe8>)
 8000c92:	f000 fcd3 	bl	800163c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 0318 	add.w	r3, r7, #24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481a      	ldr	r0, [pc, #104]	; (8000d14 <HAL_UART_MspInit+0xe8>)
 8000cac:	f000 fcc6 	bl	800163c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb0:	e028      	b.n	8000d04 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d123      	bne.n	8000d04 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc6:	61d3      	str	r3, [r2, #28]
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_UART_MspInit+0xe4>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cec:	230c      	movs	r3, #12
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0318 	add.w	r3, r7, #24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_UART_MspInit+0xe8>)
 8000d00:	f000 fc9c 	bl	800163c <HAL_GPIO_Init>
}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40013800 	.word	0x40013800
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40004400 	.word	0x40004400

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d62:	f000 f91d 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d6e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d72:	f000 fe17 	bl	80019a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e00a      	b.n	8000da2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d8c:	f3af 8000 	nop.w
 8000d90:	4601      	mov	r1, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	60ba      	str	r2, [r7, #8]
 8000d98:	b2ca      	uxtb	r2, r1
 8000d9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dbf0      	blt.n	8000d8c <_read+0x12>
	}

return len;
 8000daa:	687b      	ldr	r3, [r7, #4]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dda:	605a      	str	r2, [r3, #4]
	return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <_isatty>:

int _isatty(int file)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	return 1;
 8000df0:	2301      	movs	r3, #1
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f001 fc44 	bl	80026d0 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20005000 	.word	0x20005000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	20000098 	.word	0x20000098
 8000e7c:	20000160 	.word	0x20000160

08000e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e98:	4c0a      	ldr	r4, [pc, #40]	; (8000ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ea6:	f000 f810 	bl	8000eca <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f001 fc17 	bl	80026dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eae:	f7ff fa73 	bl	8000398 <main>
  bx lr
 8000eb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ebc:	08003980 	.word	0x08003980
  ldr r2, =_sbss
 8000ec0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ec4:	20000160 	.word	0x20000160

08000ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec8:	e7fe      	b.n	8000ec8 <ADC1_2_IRQHandler>

08000eca <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x28>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x28>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f965 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f826 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fe68 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_DeInit+0x2c>)
 8000f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f0e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_DeInit+0x2c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_DeInit+0x2c>)
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f1c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_DeInit+0x2c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f24:	f000 f806 	bl	8000f34 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f95f 	bl	8001222 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	f000 f927 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000004 	.word	0x20000004
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	2000012c 	.word	0x2000012c

08000fc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b02      	ldr	r3, [pc, #8]	; (8000fd4 <HAL_GetTick+0x10>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	2000012c 	.word	0x2000012c

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff fff0 	bl	8000fc4 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffe0 	bl	8000fc4 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000000c 	.word	0x2000000c

08001020 <__NVIC_SetPriorityGrouping>:
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4906      	ldr	r1, [pc, #24]	; (80010b8 <__NVIC_EnableIRQ+0x34>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <SysTick_Config>:
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001198:	f7ff ff90 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff2d 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff42 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff90 	bl	8001110 <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5f 	bl	80010bc <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff35 	bl	8001084 <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa2 	bl	8001174 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_FLASH_Program+0xd8>)
 8001258:	7e1b      	ldrb	r3, [r3, #24]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_FLASH_Program+0x26>
 800125e:	2302      	movs	r3, #2
 8001260:	e054      	b.n	800130c <HAL_FLASH_Program+0xd0>
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <HAL_FLASH_Program+0xd8>)
 8001264:	2201      	movs	r2, #1
 8001266:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001268:	f24c 3050 	movw	r0, #50000	; 0xc350
 800126c:	f000 f8a8 	bl	80013c0 <FLASH_WaitForLastOperation>
 8001270:	4603      	mov	r3, r0
 8001272:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d144      	bne.n	8001304 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d102      	bne.n	8001286 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001280:	2301      	movs	r3, #1
 8001282:	757b      	strb	r3, [r7, #21]
 8001284:	e007      	b.n	8001296 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d102      	bne.n	8001292 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800128c:	2302      	movs	r3, #2
 800128e:	757b      	strb	r3, [r7, #21]
 8001290:	e001      	b.n	8001296 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001292:	2304      	movs	r3, #4
 8001294:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001296:	2300      	movs	r3, #0
 8001298:	75bb      	strb	r3, [r7, #22]
 800129a:	e02d      	b.n	80012f8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800129c:	7dbb      	ldrb	r3, [r7, #22]
 800129e:	005a      	lsls	r2, r3, #1
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	eb02 0c03 	add.w	ip, r2, r3
 80012a6:	7dbb      	ldrb	r3, [r7, #22]
 80012a8:	0119      	lsls	r1, r3, #4
 80012aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012ae:	f1c1 0620 	rsb	r6, r1, #32
 80012b2:	f1a1 0020 	sub.w	r0, r1, #32
 80012b6:	fa22 f401 	lsr.w	r4, r2, r1
 80012ba:	fa03 f606 	lsl.w	r6, r3, r6
 80012be:	4334      	orrs	r4, r6
 80012c0:	fa23 f000 	lsr.w	r0, r3, r0
 80012c4:	4304      	orrs	r4, r0
 80012c6:	fa23 f501 	lsr.w	r5, r3, r1
 80012ca:	b2a3      	uxth	r3, r4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4660      	mov	r0, ip
 80012d0:	f000 f85a 	bl	8001388 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012d8:	f000 f872 	bl	80013c0 <FLASH_WaitForLastOperation>
 80012dc:	4603      	mov	r3, r0
 80012de:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_FLASH_Program+0xdc>)
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HAL_FLASH_Program+0xdc>)
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d107      	bne.n	8001302 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80012f2:	7dbb      	ldrb	r3, [r7, #22]
 80012f4:	3301      	adds	r3, #1
 80012f6:	75bb      	strb	r3, [r7, #22]
 80012f8:	7dba      	ldrb	r2, [r7, #22]
 80012fa:	7d7b      	ldrb	r3, [r7, #21]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3cd      	bcc.n	800129c <HAL_FLASH_Program+0x60>
 8001300:	e000      	b.n	8001304 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001302:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_FLASH_Program+0xd8>)
 8001306:	2200      	movs	r2, #0
 8001308:	761a      	strb	r2, [r3, #24]

  return status;
 800130a:	7dfb      	ldrb	r3, [r7, #23]
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	20000130 	.word	0x20000130
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_FLASH_Unlock+0x40>)
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00d      	beq.n	800134e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_FLASH_Unlock+0x40>)
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_FLASH_Unlock+0x44>)
 8001336:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <HAL_FLASH_Unlock+0x40>)
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_FLASH_Unlock+0x48>)
 800133c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <HAL_FLASH_Unlock+0x40>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800134e:	79fb      	ldrb	r3, [r7, #7]
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40022000 	.word	0x40022000
 8001360:	45670123 	.word	0x45670123
 8001364:	cdef89ab 	.word	0xcdef89ab

08001368 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_FLASH_Lock+0x1c>)
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_FLASH_Lock+0x1c>)
 8001372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001376:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40022000 	.word	0x40022000

08001388 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <FLASH_Program_HalfWord+0x30>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <FLASH_Program_HalfWord+0x34>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	4a07      	ldr	r2, [pc, #28]	; (80013bc <FLASH_Program_HalfWord+0x34>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	887a      	ldrh	r2, [r7, #2]
 80013aa:	801a      	strh	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000130 	.word	0x20000130
 80013bc:	40022000 	.word	0x40022000

080013c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff fdfc 	bl	8000fc4 <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013ce:	e010      	b.n	80013f2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d6:	d00c      	beq.n	80013f2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d007      	beq.n	80013ee <FLASH_WaitForLastOperation+0x2e>
 80013de:	f7ff fdf1 	bl	8000fc4 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d201      	bcs.n	80013f2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e025      	b.n	800143e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <FLASH_WaitForLastOperation+0x88>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1e8      	bne.n	80013d0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <FLASH_WaitForLastOperation+0x88>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <FLASH_WaitForLastOperation+0x88>)
 800140c:	2220      	movs	r2, #32
 800140e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <FLASH_WaitForLastOperation+0x88>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10b      	bne.n	8001434 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <FLASH_WaitForLastOperation+0x88>)
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <FLASH_WaitForLastOperation+0x88>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001434:	f000 f80a 	bl	800144c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000

0800144c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <FLASH_SetErrorCode+0x98>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <FLASH_SetErrorCode+0x9c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <FLASH_SetErrorCode+0x9c>)
 800146c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f043 0310 	orr.w	r3, r3, #16
 8001474:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <FLASH_SetErrorCode+0x98>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <FLASH_SetErrorCode+0x9c>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <FLASH_SetErrorCode+0x9c>)
 800148c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <FLASH_SetErrorCode+0x98>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <FLASH_SetErrorCode+0x9c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <FLASH_SetErrorCode+0x9c>)
 80014ac:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <FLASH_SetErrorCode+0x98>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <FLASH_SetErrorCode+0x98>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f240 1201 	movw	r2, #257	; 0x101
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d106      	bne.n	80014d2 <FLASH_SetErrorCode+0x86>
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <FLASH_SetErrorCode+0x98>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <FLASH_SetErrorCode+0x98>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	61d3      	str	r3, [r2, #28]
}  
 80014d0:	e002      	b.n	80014d8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <FLASH_SetErrorCode+0x98>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60d3      	str	r3, [r2, #12]
}  
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40022000 	.word	0x40022000
 80014e8:	20000130 	.word	0x20000130

080014ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_FLASHEx_Erase+0xd0>)
 8001500:	7e1b      	ldrb	r3, [r3, #24]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_FLASHEx_Erase+0x1e>
 8001506:	2302      	movs	r3, #2
 8001508:	e053      	b.n	80015b2 <HAL_FLASHEx_Erase+0xc6>
 800150a:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_FLASHEx_Erase+0xd0>)
 800150c:	2201      	movs	r2, #1
 800150e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d116      	bne.n	8001546 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001518:	f24c 3050 	movw	r0, #50000	; 0xc350
 800151c:	f7ff ff50 	bl	80013c0 <FLASH_WaitForLastOperation>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d141      	bne.n	80015aa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001526:	2001      	movs	r0, #1
 8001528:	f000 f84c 	bl	80015c4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800152c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001530:	f7ff ff46 	bl	80013c0 <FLASH_WaitForLastOperation>
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <HAL_FLASHEx_Erase+0xd4>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <HAL_FLASHEx_Erase+0xd4>)
 800153e:	f023 0304 	bic.w	r3, r3, #4
 8001542:	6113      	str	r3, [r2, #16]
 8001544:	e031      	b.n	80015aa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001546:	f24c 3050 	movw	r0, #50000	; 0xc350
 800154a:	f7ff ff39 	bl	80013c0 <FLASH_WaitForLastOperation>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d12a      	bne.n	80015aa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800155a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	e019      	b.n	8001598 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f000 f849 	bl	80015fc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800156a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800156e:	f7ff ff27 	bl	80013c0 <FLASH_WaitForLastOperation>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_FLASHEx_Erase+0xd4>)
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <HAL_FLASHEx_Erase+0xd4>)
 800157c:	f023 0302 	bic.w	r3, r3, #2
 8001580:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	601a      	str	r2, [r3, #0]
            break;
 800158e:	e00c      	b.n	80015aa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001596:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	029a      	lsls	r2, r3, #10
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3dc      	bcc.n	8001564 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <HAL_FLASHEx_Erase+0xd0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	761a      	strb	r2, [r3, #24]

  return status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000130 	.word	0x20000130
 80015c0:	40022000 	.word	0x40022000

080015c4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <FLASH_MassErase+0x30>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <FLASH_MassErase+0x34>)
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <FLASH_MassErase+0x34>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <FLASH_MassErase+0x34>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4a05      	ldr	r2, [pc, #20]	; (80015f8 <FLASH_MassErase+0x34>)
 80015e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000130 	.word	0x20000130
 80015f8:	40022000 	.word	0x40022000

080015fc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <FLASH_PageErase+0x38>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <FLASH_PageErase+0x3c>)
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <FLASH_PageErase+0x3c>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <FLASH_PageErase+0x3c>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <FLASH_PageErase+0x3c>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <FLASH_PageErase+0x3c>)
 8001622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001626:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000130 	.word	0x20000130
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164e:	e169      	b.n	8001924 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001650:	2201      	movs	r2, #1
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	429a      	cmp	r2, r3
 800166a:	f040 8158 	bne.w	800191e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4a9a      	ldr	r2, [pc, #616]	; (80018dc <HAL_GPIO_Init+0x2a0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d05e      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001678:	4a98      	ldr	r2, [pc, #608]	; (80018dc <HAL_GPIO_Init+0x2a0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d875      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 800167e:	4a98      	ldr	r2, [pc, #608]	; (80018e0 <HAL_GPIO_Init+0x2a4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d058      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001684:	4a96      	ldr	r2, [pc, #600]	; (80018e0 <HAL_GPIO_Init+0x2a4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d86f      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 800168a:	4a96      	ldr	r2, [pc, #600]	; (80018e4 <HAL_GPIO_Init+0x2a8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d052      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 8001690:	4a94      	ldr	r2, [pc, #592]	; (80018e4 <HAL_GPIO_Init+0x2a8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d869      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 8001696:	4a94      	ldr	r2, [pc, #592]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d04c      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 800169c:	4a92      	ldr	r2, [pc, #584]	; (80018e8 <HAL_GPIO_Init+0x2ac>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d863      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016a2:	4a92      	ldr	r2, [pc, #584]	; (80018ec <HAL_GPIO_Init+0x2b0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d046      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
 80016a8:	4a90      	ldr	r2, [pc, #576]	; (80018ec <HAL_GPIO_Init+0x2b0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d85d      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016ae:	2b12      	cmp	r3, #18
 80016b0:	d82a      	bhi.n	8001708 <HAL_GPIO_Init+0xcc>
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d859      	bhi.n	800176a <HAL_GPIO_Init+0x12e>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <HAL_GPIO_Init+0x80>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	08001737 	.word	0x08001737
 80016c0:	08001711 	.word	0x08001711
 80016c4:	08001723 	.word	0x08001723
 80016c8:	08001765 	.word	0x08001765
 80016cc:	0800176b 	.word	0x0800176b
 80016d0:	0800176b 	.word	0x0800176b
 80016d4:	0800176b 	.word	0x0800176b
 80016d8:	0800176b 	.word	0x0800176b
 80016dc:	0800176b 	.word	0x0800176b
 80016e0:	0800176b 	.word	0x0800176b
 80016e4:	0800176b 	.word	0x0800176b
 80016e8:	0800176b 	.word	0x0800176b
 80016ec:	0800176b 	.word	0x0800176b
 80016f0:	0800176b 	.word	0x0800176b
 80016f4:	0800176b 	.word	0x0800176b
 80016f8:	0800176b 	.word	0x0800176b
 80016fc:	0800176b 	.word	0x0800176b
 8001700:	08001719 	.word	0x08001719
 8001704:	0800172d 	.word	0x0800172d
 8001708:	4a79      	ldr	r2, [pc, #484]	; (80018f0 <HAL_GPIO_Init+0x2b4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800170e:	e02c      	b.n	800176a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e029      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	3304      	adds	r3, #4
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e024      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	3308      	adds	r3, #8
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e01f      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	330c      	adds	r3, #12
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e01a      	b.n	800176c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800173e:	2304      	movs	r3, #4
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e013      	b.n	800176c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	611a      	str	r2, [r3, #16]
          break;
 8001756:	e009      	b.n	800176c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001758:	2308      	movs	r3, #8
 800175a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	615a      	str	r2, [r3, #20]
          break;
 8001762:	e003      	b.n	800176c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x130>
          break;
 800176a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d801      	bhi.n	8001776 <HAL_GPIO_Init+0x13a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	e001      	b.n	800177a <HAL_GPIO_Init+0x13e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3304      	adds	r3, #4
 800177a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2bff      	cmp	r3, #255	; 0xff
 8001780:	d802      	bhi.n	8001788 <HAL_GPIO_Init+0x14c>
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	e002      	b.n	800178e <HAL_GPIO_Init+0x152>
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	3b08      	subs	r3, #8
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	210f      	movs	r1, #15
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	6a39      	ldr	r1, [r7, #32]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80b1 	beq.w	800191e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017bc:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <HAL_GPIO_Init+0x2b8>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a4c      	ldr	r2, [pc, #304]	; (80018f4 <HAL_GPIO_Init+0x2b8>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_GPIO_Init+0x2b8>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d4:	4a48      	ldr	r2, [pc, #288]	; (80018f8 <HAL_GPIO_Init+0x2bc>)
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a40      	ldr	r2, [pc, #256]	; (80018fc <HAL_GPIO_Init+0x2c0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d013      	beq.n	8001828 <HAL_GPIO_Init+0x1ec>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3f      	ldr	r2, [pc, #252]	; (8001900 <HAL_GPIO_Init+0x2c4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d00d      	beq.n	8001824 <HAL_GPIO_Init+0x1e8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a3e      	ldr	r2, [pc, #248]	; (8001904 <HAL_GPIO_Init+0x2c8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_Init+0x1e4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <HAL_GPIO_Init+0x2cc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d101      	bne.n	800181c <HAL_GPIO_Init+0x1e0>
 8001818:	2303      	movs	r3, #3
 800181a:	e006      	b.n	800182a <HAL_GPIO_Init+0x1ee>
 800181c:	2304      	movs	r3, #4
 800181e:	e004      	b.n	800182a <HAL_GPIO_Init+0x1ee>
 8001820:	2302      	movs	r3, #2
 8001822:	e002      	b.n	800182a <HAL_GPIO_Init+0x1ee>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_GPIO_Init+0x1ee>
 8001828:	2300      	movs	r3, #0
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	f002 0203 	and.w	r2, r2, #3
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	4093      	lsls	r3, r2
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183a:	492f      	ldr	r1, [pc, #188]	; (80018f8 <HAL_GPIO_Init+0x2bc>)
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_GPIO_Init+0x2d0>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	492c      	ldr	r1, [pc, #176]	; (800190c <HAL_GPIO_Init+0x2d0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001862:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_GPIO_Init+0x2d0>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	4928      	ldr	r1, [pc, #160]	; (800190c <HAL_GPIO_Init+0x2d0>)
 800186c:	4013      	ands	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <HAL_GPIO_Init+0x2d0>)
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4922      	ldr	r1, [pc, #136]	; (800190c <HAL_GPIO_Init+0x2d0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800188a:	4b20      	ldr	r3, [pc, #128]	; (800190c <HAL_GPIO_Init+0x2d0>)
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	491e      	ldr	r1, [pc, #120]	; (800190c <HAL_GPIO_Init+0x2d0>)
 8001894:	4013      	ands	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4918      	ldr	r1, [pc, #96]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4914      	ldr	r1, [pc, #80]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d021      	beq.n	8001910 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_GPIO_Init+0x2d0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60cb      	str	r3, [r1, #12]
 80018d8:	e021      	b.n	800191e <HAL_GPIO_Init+0x2e2>
 80018da:	bf00      	nop
 80018dc:	10320000 	.word	0x10320000
 80018e0:	10310000 	.word	0x10310000
 80018e4:	10220000 	.word	0x10220000
 80018e8:	10210000 	.word	0x10210000
 80018ec:	10120000 	.word	0x10120000
 80018f0:	10110000 	.word	0x10110000
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010000 	.word	0x40010000
 80018fc:	40010800 	.word	0x40010800
 8001900:	40010c00 	.word	0x40010c00
 8001904:	40011000 	.word	0x40011000
 8001908:	40011400 	.word	0x40011400
 800190c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_GPIO_Init+0x304>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	43db      	mvns	r3, r3
 8001918:	4909      	ldr	r1, [pc, #36]	; (8001940 <HAL_GPIO_Init+0x304>)
 800191a:	4013      	ands	r3, r2
 800191c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	3301      	adds	r3, #1
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	f47f ae8e 	bne.w	8001650 <HAL_GPIO_Init+0x14>
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	372c      	adds	r7, #44	; 0x2c
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40010400 	.word	0x40010400

08001944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	807b      	strh	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001982:	787b      	ldrb	r3, [r7, #1]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001988:	887a      	ldrh	r2, [r7, #2]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800198e:	e003      	b.n	8001998 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	041a      	lsls	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f806 	bl	80019d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e26c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8087 	beq.w	8001b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a08:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d00c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a14:	4b8f      	ldr	r3, [pc, #572]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d112      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5e>
 8001a20:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d10b      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d06c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x12c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d168      	bne.n	8001b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e246      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x76>
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e02e      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x98>
 8001a66:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7a      	ldr	r2, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a77      	ldr	r2, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e01d      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xbc>
 8001a8a:	4b72      	ldr	r3, [pc, #456]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a71      	ldr	r2, [pc, #452]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6a      	ldr	r2, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fa7e 	bl	8000fc4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fa7a 	bl	8000fc4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1fa      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0xe4>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa6a 	bl	8000fc4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fa66 	bl	8000fc4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1e6      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x10c>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d063      	beq.n	8001bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b22:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b2e:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d11c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x18c>
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d116      	bne.n	8001b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x176>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1ba      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4939      	ldr	r1, [pc, #228]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	e03a      	b.n	8001bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa1f 	bl	8000fc4 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fa1b 	bl	8000fc4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e19b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4927      	ldr	r1, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f9fe 	bl	8000fc4 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f9fa 	bl	8000fc4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e17a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d03a      	beq.n	8001c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d019      	beq.n	8001c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff f9de 	bl	8000fc4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f9da 	bl	8000fc4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e15a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f000 fad8 	bl	80021e0 <RCC_Delay>
 8001c30:	e01c      	b.n	8001c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7ff f9c4 	bl	8000fc4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff f9c0 	bl	8000fc4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d908      	bls.n	8001c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e140      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	42420000 	.word	0x42420000
 8001c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c60:	4b9e      	ldr	r3, [pc, #632]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e9      	bne.n	8001c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a6 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7e:	4b97      	ldr	r3, [pc, #604]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10d      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b94      	ldr	r3, [pc, #592]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a93      	ldr	r2, [pc, #588]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]
 8001c96:	4b91      	ldr	r3, [pc, #580]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b8e      	ldr	r3, [pc, #568]	; (8001ee0 <HAL_RCC_OscConfig+0x4f8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d118      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	; (8001ee0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a8a      	ldr	r2, [pc, #552]	; (8001ee0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f981 	bl	8000fc4 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc6:	f7ff f97d 	bl	8000fc4 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b64      	cmp	r3, #100	; 0x64
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0fd      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <HAL_RCC_OscConfig+0x4f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x312>
 8001cec:	4b7b      	ldr	r3, [pc, #492]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a7a      	ldr	r2, [pc, #488]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e02d      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x334>
 8001d02:	4b76      	ldr	r3, [pc, #472]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a75      	ldr	r2, [pc, #468]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b73      	ldr	r3, [pc, #460]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a72      	ldr	r2, [pc, #456]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	e01c      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x356>
 8001d24:	4b6d      	ldr	r3, [pc, #436]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a6c      	ldr	r2, [pc, #432]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a69      	ldr	r2, [pc, #420]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	e00b      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001d3e:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a66      	ldr	r2, [pc, #408]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	4b64      	ldr	r3, [pc, #400]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a63      	ldr	r2, [pc, #396]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d015      	beq.n	8001d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f931 	bl	8000fc4 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff f92d 	bl	8000fc4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0ab      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	4b57      	ldr	r3, [pc, #348]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0ee      	beq.n	8001d66 <HAL_RCC_OscConfig+0x37e>
 8001d88:	e014      	b.n	8001db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff f91b 	bl	8000fc4 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7ff f917 	bl	8000fc4 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e095      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ee      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4b48      	ldr	r3, [pc, #288]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a47      	ldr	r2, [pc, #284]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8081 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd0:	4b42      	ldr	r3, [pc, #264]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d061      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d146      	bne.n	8001e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <HAL_RCC_OscConfig+0x4fc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff f8eb 	bl	8000fc4 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f8e7 	bl	8000fc4 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e067      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d108      	bne.n	8001e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	492d      	ldr	r1, [pc, #180]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a19      	ldr	r1, [r3, #32]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	4927      	ldr	r1, [pc, #156]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <HAL_RCC_OscConfig+0x4fc>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f8bb 	bl	8000fc4 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f8b7 	bl	8000fc4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e037      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x46a>
 8001e70:	e02f      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_RCC_OscConfig+0x4fc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff f8a4 	bl	8000fc4 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f8a0 	bl	8000fc4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e020      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x498>
 8001e9e:	e018      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e013      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	42420060 	.word	0x42420060

08001ee8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0d0      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4965      	ldr	r1, [pc, #404]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0b8      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a52      	ldr	r2, [pc, #328]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	494d      	ldr	r1, [pc, #308]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d040      	beq.n	8002008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d115      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e07f      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b41      	ldr	r3, [pc, #260]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e073      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06b      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4936      	ldr	r1, [pc, #216]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fff4 	bl	8000fc4 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe fff0 	bl	8000fc4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e053      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d210      	bcs.n	8002038 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4922      	ldr	r1, [pc, #136]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e032      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4916      	ldr	r1, [pc, #88]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002076:	f000 f821 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800207a:	4602      	mov	r2, r0
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	490a      	ldr	r1, [pc, #40]	; (80020b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002088:	5ccb      	ldrb	r3, [r1, r3]
 800208a:	fa22 f303 	lsr.w	r3, r2, r3
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe ff52 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40022000 	.word	0x40022000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	080038c8 	.word	0x080038c8
 80020b4:	20000004 	.word	0x20000004
 80020b8:	20000008 	.word	0x20000008

080020bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b490      	push	{r4, r7}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020c2:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020c4:	1d3c      	adds	r4, r7, #4
 80020c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020cc:	f240 2301 	movw	r3, #513	; 0x201
 80020d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d002      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x40>
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x46>
 80020fa:	e02d      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fe:	623b      	str	r3, [r7, #32]
      break;
 8002100:	e02d      	b.n	800215e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	0c9b      	lsrs	r3, r3, #18
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800210e:	4413      	add	r3, r2
 8002110:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002114:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0c5b      	lsrs	r3, r3, #17
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800212e:	4413      	add	r3, r2
 8002130:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002134:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 800213a:	fb02 f203 	mul.w	r2, r2, r3
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	e004      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_RCC_GetSysClockFreq+0xbc>)
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	623b      	str	r3, [r7, #32]
      break;
 8002156:	e002      	b.n	800215e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 800215a:	623b      	str	r3, [r7, #32]
      break;
 800215c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215e:	6a3b      	ldr	r3, [r7, #32]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3728      	adds	r7, #40	; 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bc90      	pop	{r4, r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	080038b8 	.word	0x080038b8
 8002170:	40021000 	.word	0x40021000
 8002174:	007a1200 	.word	0x007a1200
 8002178:	003d0900 	.word	0x003d0900

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_RCC_GetHCLKFreq+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002194:	f7ff fff2 	bl	800217c <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	080038d8 	.word	0x080038d8

080021b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021bc:	f7ff ffde 	bl	800217c <HAL_RCC_GetHCLKFreq>
 80021c0:	4602      	mov	r2, r0
 80021c2:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	0adb      	lsrs	r3, r3, #11
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	4903      	ldr	r1, [pc, #12]	; (80021dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ce:	5ccb      	ldrb	r3, [r1, r3]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	080038d8 	.word	0x080038d8

080021e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <RCC_Delay+0x34>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <RCC_Delay+0x38>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0a5b      	lsrs	r3, r3, #9
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021fc:	bf00      	nop
  }
  while (Delay --);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	60fa      	str	r2, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f9      	bne.n	80021fc <RCC_Delay+0x1c>
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000004 	.word	0x20000004
 8002218:	10624dd3 	.word	0x10624dd3

0800221c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e03f      	b.n	80022ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fcf2 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	; 0x24
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800225e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f9a7 	bl	80025b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b08a      	sub	sp, #40	; 0x28
 80022ba:	af02      	add	r7, sp, #8
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d17c      	bne.n	80023d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_UART_Transmit+0x2c>
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e075      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Transmit+0x3e>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e06e      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2221      	movs	r2, #33	; 0x21
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800230a:	f7fe fe5b 	bl	8000fc4 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	88fa      	ldrh	r2, [r7, #6]
 800231a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002324:	d108      	bne.n	8002338 <HAL_UART_Transmit+0x82>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d104      	bne.n	8002338 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	e003      	b.n	8002340 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002348:	e02a      	b.n	80023a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2200      	movs	r2, #0
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f8e2 	bl	800251e <UART_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e036      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10b      	bne.n	8002382 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002378:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3302      	adds	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	e007      	b.n	8002392 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1cf      	bne.n	800234a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2200      	movs	r2, #0
 80023b2:	2140      	movs	r1, #64	; 0x40
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f8b2 	bl	800251e <UART_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e006      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e000      	b.n	80023d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023d0:	2302      	movs	r3, #2
  }
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b08a      	sub	sp, #40	; 0x28
 80023de:	af02      	add	r7, sp, #8
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	f040 808c 	bne.w	8002514 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_UART_Receive+0x2e>
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e084      	b.n	8002516 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_UART_Receive+0x40>
 8002416:	2302      	movs	r3, #2
 8002418:	e07d      	b.n	8002516 <HAL_UART_Receive+0x13c>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2222      	movs	r2, #34	; 0x22
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002436:	f7fe fdc5 	bl	8000fc4 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002450:	d108      	bne.n	8002464 <HAL_UART_Receive+0x8a>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d104      	bne.n	8002464 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	61bb      	str	r3, [r7, #24]
 8002462:	e003      	b.n	800246c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002474:	e043      	b.n	80024fe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2200      	movs	r2, #0
 800247e:	2120      	movs	r1, #32
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f84c 	bl	800251e <UART_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e042      	b.n	8002516 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3302      	adds	r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	e01f      	b.n	80024f0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b8:	d007      	beq.n	80024ca <HAL_UART_Receive+0xf0>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10a      	bne.n	80024d8 <HAL_UART_Receive+0xfe>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e008      	b.n	80024ea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3301      	adds	r3, #1
 80024ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1b6      	bne.n	8002476 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002514:	2302      	movs	r3, #2
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3720      	adds	r7, #32
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252e:	e02c      	b.n	800258a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002536:	d028      	beq.n	800258a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <UART_WaitOnFlagUntilTimeout+0x30>
 800253e:	f7fe fd41 	bl	8000fc4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	429a      	cmp	r2, r3
 800254c:	d21d      	bcs.n	800258a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800255c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e00f      	b.n	80025aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4013      	ands	r3, r2
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	bf0c      	ite	eq
 800259a:	2301      	moveq	r3, #1
 800259c:	2300      	movne	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d0c3      	beq.n	8002530 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025ee:	f023 030c 	bic.w	r3, r3, #12
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <UART_SetConfig+0x114>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d103      	bne.n	8002624 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800261c:	f7ff fdcc 	bl	80021b8 <HAL_RCC_GetPCLK2Freq>
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	e002      	b.n	800262a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002624:	f7ff fdb4 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8002628:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	4a22      	ldr	r2, [pc, #136]	; (80026cc <UART_SetConfig+0x118>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	0119      	lsls	r1, r3, #4
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	009a      	lsls	r2, r3, #2
 8002654:	441a      	add	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <UART_SetConfig+0x118>)
 8002662:	fba3 0302 	umull	r0, r3, r3, r2
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2064      	movs	r0, #100	; 0x64
 800266a:	fb00 f303 	mul.w	r3, r0, r3
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	3332      	adds	r3, #50	; 0x32
 8002674:	4a15      	ldr	r2, [pc, #84]	; (80026cc <UART_SetConfig+0x118>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002680:	4419      	add	r1, r3
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009a      	lsls	r2, r3, #2
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	fbb2 f2f3 	udiv	r2, r2, r3
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <UART_SetConfig+0x118>)
 800269a:	fba3 0302 	umull	r0, r3, r3, r2
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	2064      	movs	r0, #100	; 0x64
 80026a2:	fb00 f303 	mul.w	r3, r0, r3
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	3332      	adds	r3, #50	; 0x32
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <UART_SetConfig+0x118>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	f003 020f 	and.w	r2, r3, #15
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	440a      	add	r2, r1
 80026be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40013800 	.word	0x40013800
 80026cc:	51eb851f 	.word	0x51eb851f

080026d0 <__errno>:
 80026d0:	4b01      	ldr	r3, [pc, #4]	; (80026d8 <__errno+0x8>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000010 	.word	0x20000010

080026dc <__libc_init_array>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	2600      	movs	r6, #0
 80026e0:	4d0c      	ldr	r5, [pc, #48]	; (8002714 <__libc_init_array+0x38>)
 80026e2:	4c0d      	ldr	r4, [pc, #52]	; (8002718 <__libc_init_array+0x3c>)
 80026e4:	1b64      	subs	r4, r4, r5
 80026e6:	10a4      	asrs	r4, r4, #2
 80026e8:	42a6      	cmp	r6, r4
 80026ea:	d109      	bne.n	8002700 <__libc_init_array+0x24>
 80026ec:	f000 ff82 	bl	80035f4 <_init>
 80026f0:	2600      	movs	r6, #0
 80026f2:	4d0a      	ldr	r5, [pc, #40]	; (800271c <__libc_init_array+0x40>)
 80026f4:	4c0a      	ldr	r4, [pc, #40]	; (8002720 <__libc_init_array+0x44>)
 80026f6:	1b64      	subs	r4, r4, r5
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	42a6      	cmp	r6, r4
 80026fc:	d105      	bne.n	800270a <__libc_init_array+0x2e>
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	f855 3b04 	ldr.w	r3, [r5], #4
 8002704:	4798      	blx	r3
 8002706:	3601      	adds	r6, #1
 8002708:	e7ee      	b.n	80026e8 <__libc_init_array+0xc>
 800270a:	f855 3b04 	ldr.w	r3, [r5], #4
 800270e:	4798      	blx	r3
 8002710:	3601      	adds	r6, #1
 8002712:	e7f2      	b.n	80026fa <__libc_init_array+0x1e>
 8002714:	08003978 	.word	0x08003978
 8002718:	08003978 	.word	0x08003978
 800271c:	08003978 	.word	0x08003978
 8002720:	0800397c 	.word	0x0800397c

08002724 <memset>:
 8002724:	4603      	mov	r3, r0
 8002726:	4402      	add	r2, r0
 8002728:	4293      	cmp	r3, r2
 800272a:	d100      	bne.n	800272e <memset+0xa>
 800272c:	4770      	bx	lr
 800272e:	f803 1b01 	strb.w	r1, [r3], #1
 8002732:	e7f9      	b.n	8002728 <memset+0x4>

08002734 <iprintf>:
 8002734:	b40f      	push	{r0, r1, r2, r3}
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <iprintf+0x2c>)
 8002738:	b513      	push	{r0, r1, r4, lr}
 800273a:	681c      	ldr	r4, [r3, #0]
 800273c:	b124      	cbz	r4, 8002748 <iprintf+0x14>
 800273e:	69a3      	ldr	r3, [r4, #24]
 8002740:	b913      	cbnz	r3, 8002748 <iprintf+0x14>
 8002742:	4620      	mov	r0, r4
 8002744:	f000 f866 	bl	8002814 <__sinit>
 8002748:	ab05      	add	r3, sp, #20
 800274a:	4620      	mov	r0, r4
 800274c:	9a04      	ldr	r2, [sp, #16]
 800274e:	68a1      	ldr	r1, [r4, #8]
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	f000 f981 	bl	8002a58 <_vfiprintf_r>
 8002756:	b002      	add	sp, #8
 8002758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800275c:	b004      	add	sp, #16
 800275e:	4770      	bx	lr
 8002760:	20000010 	.word	0x20000010

08002764 <std>:
 8002764:	2300      	movs	r3, #0
 8002766:	b510      	push	{r4, lr}
 8002768:	4604      	mov	r4, r0
 800276a:	e9c0 3300 	strd	r3, r3, [r0]
 800276e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002772:	6083      	str	r3, [r0, #8]
 8002774:	8181      	strh	r1, [r0, #12]
 8002776:	6643      	str	r3, [r0, #100]	; 0x64
 8002778:	81c2      	strh	r2, [r0, #14]
 800277a:	6183      	str	r3, [r0, #24]
 800277c:	4619      	mov	r1, r3
 800277e:	2208      	movs	r2, #8
 8002780:	305c      	adds	r0, #92	; 0x5c
 8002782:	f7ff ffcf 	bl	8002724 <memset>
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <std+0x38>)
 8002788:	6224      	str	r4, [r4, #32]
 800278a:	6263      	str	r3, [r4, #36]	; 0x24
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <std+0x3c>)
 800278e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <std+0x40>)
 8002792:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <std+0x44>)
 8002796:	6323      	str	r3, [r4, #48]	; 0x30
 8002798:	bd10      	pop	{r4, pc}
 800279a:	bf00      	nop
 800279c:	08003005 	.word	0x08003005
 80027a0:	08003027 	.word	0x08003027
 80027a4:	0800305f 	.word	0x0800305f
 80027a8:	08003083 	.word	0x08003083

080027ac <_cleanup_r>:
 80027ac:	4901      	ldr	r1, [pc, #4]	; (80027b4 <_cleanup_r+0x8>)
 80027ae:	f000 b8af 	b.w	8002910 <_fwalk_reent>
 80027b2:	bf00      	nop
 80027b4:	0800335d 	.word	0x0800335d

080027b8 <__sfmoreglue>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	2568      	movs	r5, #104	; 0x68
 80027bc:	1e4a      	subs	r2, r1, #1
 80027be:	4355      	muls	r5, r2
 80027c0:	460e      	mov	r6, r1
 80027c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027c6:	f000 f8c5 	bl	8002954 <_malloc_r>
 80027ca:	4604      	mov	r4, r0
 80027cc:	b140      	cbz	r0, 80027e0 <__sfmoreglue+0x28>
 80027ce:	2100      	movs	r1, #0
 80027d0:	e9c0 1600 	strd	r1, r6, [r0]
 80027d4:	300c      	adds	r0, #12
 80027d6:	60a0      	str	r0, [r4, #8]
 80027d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80027dc:	f7ff ffa2 	bl	8002724 <memset>
 80027e0:	4620      	mov	r0, r4
 80027e2:	bd70      	pop	{r4, r5, r6, pc}

080027e4 <__sfp_lock_acquire>:
 80027e4:	4801      	ldr	r0, [pc, #4]	; (80027ec <__sfp_lock_acquire+0x8>)
 80027e6:	f000 b8b3 	b.w	8002950 <__retarget_lock_acquire_recursive>
 80027ea:	bf00      	nop
 80027ec:	20000158 	.word	0x20000158

080027f0 <__sfp_lock_release>:
 80027f0:	4801      	ldr	r0, [pc, #4]	; (80027f8 <__sfp_lock_release+0x8>)
 80027f2:	f000 b8ae 	b.w	8002952 <__retarget_lock_release_recursive>
 80027f6:	bf00      	nop
 80027f8:	20000158 	.word	0x20000158

080027fc <__sinit_lock_acquire>:
 80027fc:	4801      	ldr	r0, [pc, #4]	; (8002804 <__sinit_lock_acquire+0x8>)
 80027fe:	f000 b8a7 	b.w	8002950 <__retarget_lock_acquire_recursive>
 8002802:	bf00      	nop
 8002804:	20000153 	.word	0x20000153

08002808 <__sinit_lock_release>:
 8002808:	4801      	ldr	r0, [pc, #4]	; (8002810 <__sinit_lock_release+0x8>)
 800280a:	f000 b8a2 	b.w	8002952 <__retarget_lock_release_recursive>
 800280e:	bf00      	nop
 8002810:	20000153 	.word	0x20000153

08002814 <__sinit>:
 8002814:	b510      	push	{r4, lr}
 8002816:	4604      	mov	r4, r0
 8002818:	f7ff fff0 	bl	80027fc <__sinit_lock_acquire>
 800281c:	69a3      	ldr	r3, [r4, #24]
 800281e:	b11b      	cbz	r3, 8002828 <__sinit+0x14>
 8002820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002824:	f7ff bff0 	b.w	8002808 <__sinit_lock_release>
 8002828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800282c:	6523      	str	r3, [r4, #80]	; 0x50
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <__sinit+0x68>)
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <__sinit+0x6c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	62a2      	str	r2, [r4, #40]	; 0x28
 8002836:	42a3      	cmp	r3, r4
 8002838:	bf08      	it	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	4620      	mov	r0, r4
 800283e:	bf08      	it	eq
 8002840:	61a3      	streq	r3, [r4, #24]
 8002842:	f000 f81f 	bl	8002884 <__sfp>
 8002846:	6060      	str	r0, [r4, #4]
 8002848:	4620      	mov	r0, r4
 800284a:	f000 f81b 	bl	8002884 <__sfp>
 800284e:	60a0      	str	r0, [r4, #8]
 8002850:	4620      	mov	r0, r4
 8002852:	f000 f817 	bl	8002884 <__sfp>
 8002856:	2200      	movs	r2, #0
 8002858:	2104      	movs	r1, #4
 800285a:	60e0      	str	r0, [r4, #12]
 800285c:	6860      	ldr	r0, [r4, #4]
 800285e:	f7ff ff81 	bl	8002764 <std>
 8002862:	2201      	movs	r2, #1
 8002864:	2109      	movs	r1, #9
 8002866:	68a0      	ldr	r0, [r4, #8]
 8002868:	f7ff ff7c 	bl	8002764 <std>
 800286c:	2202      	movs	r2, #2
 800286e:	2112      	movs	r1, #18
 8002870:	68e0      	ldr	r0, [r4, #12]
 8002872:	f7ff ff77 	bl	8002764 <std>
 8002876:	2301      	movs	r3, #1
 8002878:	61a3      	str	r3, [r4, #24]
 800287a:	e7d1      	b.n	8002820 <__sinit+0xc>
 800287c:	080038e0 	.word	0x080038e0
 8002880:	080027ad 	.word	0x080027ad

08002884 <__sfp>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	4607      	mov	r7, r0
 8002888:	f7ff ffac 	bl	80027e4 <__sfp_lock_acquire>
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <__sfp+0x84>)
 800288e:	681e      	ldr	r6, [r3, #0]
 8002890:	69b3      	ldr	r3, [r6, #24]
 8002892:	b913      	cbnz	r3, 800289a <__sfp+0x16>
 8002894:	4630      	mov	r0, r6
 8002896:	f7ff ffbd 	bl	8002814 <__sinit>
 800289a:	3648      	adds	r6, #72	; 0x48
 800289c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	d503      	bpl.n	80028ac <__sfp+0x28>
 80028a4:	6833      	ldr	r3, [r6, #0]
 80028a6:	b30b      	cbz	r3, 80028ec <__sfp+0x68>
 80028a8:	6836      	ldr	r6, [r6, #0]
 80028aa:	e7f7      	b.n	800289c <__sfp+0x18>
 80028ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028b0:	b9d5      	cbnz	r5, 80028e8 <__sfp+0x64>
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <__sfp+0x88>)
 80028b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028b8:	60e3      	str	r3, [r4, #12]
 80028ba:	6665      	str	r5, [r4, #100]	; 0x64
 80028bc:	f000 f847 	bl	800294e <__retarget_lock_init_recursive>
 80028c0:	f7ff ff96 	bl	80027f0 <__sfp_lock_release>
 80028c4:	2208      	movs	r2, #8
 80028c6:	4629      	mov	r1, r5
 80028c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80028cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80028d0:	6025      	str	r5, [r4, #0]
 80028d2:	61a5      	str	r5, [r4, #24]
 80028d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028d8:	f7ff ff24 	bl	8002724 <memset>
 80028dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80028e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80028e4:	4620      	mov	r0, r4
 80028e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e8:	3468      	adds	r4, #104	; 0x68
 80028ea:	e7d9      	b.n	80028a0 <__sfp+0x1c>
 80028ec:	2104      	movs	r1, #4
 80028ee:	4638      	mov	r0, r7
 80028f0:	f7ff ff62 	bl	80027b8 <__sfmoreglue>
 80028f4:	4604      	mov	r4, r0
 80028f6:	6030      	str	r0, [r6, #0]
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d1d5      	bne.n	80028a8 <__sfp+0x24>
 80028fc:	f7ff ff78 	bl	80027f0 <__sfp_lock_release>
 8002900:	230c      	movs	r3, #12
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	e7ee      	b.n	80028e4 <__sfp+0x60>
 8002906:	bf00      	nop
 8002908:	080038e0 	.word	0x080038e0
 800290c:	ffff0001 	.word	0xffff0001

08002910 <_fwalk_reent>:
 8002910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002914:	4606      	mov	r6, r0
 8002916:	4688      	mov	r8, r1
 8002918:	2700      	movs	r7, #0
 800291a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800291e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002922:	f1b9 0901 	subs.w	r9, r9, #1
 8002926:	d505      	bpl.n	8002934 <_fwalk_reent+0x24>
 8002928:	6824      	ldr	r4, [r4, #0]
 800292a:	2c00      	cmp	r4, #0
 800292c:	d1f7      	bne.n	800291e <_fwalk_reent+0xe>
 800292e:	4638      	mov	r0, r7
 8002930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002934:	89ab      	ldrh	r3, [r5, #12]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d907      	bls.n	800294a <_fwalk_reent+0x3a>
 800293a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800293e:	3301      	adds	r3, #1
 8002940:	d003      	beq.n	800294a <_fwalk_reent+0x3a>
 8002942:	4629      	mov	r1, r5
 8002944:	4630      	mov	r0, r6
 8002946:	47c0      	blx	r8
 8002948:	4307      	orrs	r7, r0
 800294a:	3568      	adds	r5, #104	; 0x68
 800294c:	e7e9      	b.n	8002922 <_fwalk_reent+0x12>

0800294e <__retarget_lock_init_recursive>:
 800294e:	4770      	bx	lr

08002950 <__retarget_lock_acquire_recursive>:
 8002950:	4770      	bx	lr

08002952 <__retarget_lock_release_recursive>:
 8002952:	4770      	bx	lr

08002954 <_malloc_r>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	1ccd      	adds	r5, r1, #3
 8002958:	f025 0503 	bic.w	r5, r5, #3
 800295c:	3508      	adds	r5, #8
 800295e:	2d0c      	cmp	r5, #12
 8002960:	bf38      	it	cc
 8002962:	250c      	movcc	r5, #12
 8002964:	2d00      	cmp	r5, #0
 8002966:	4606      	mov	r6, r0
 8002968:	db01      	blt.n	800296e <_malloc_r+0x1a>
 800296a:	42a9      	cmp	r1, r5
 800296c:	d903      	bls.n	8002976 <_malloc_r+0x22>
 800296e:	230c      	movs	r3, #12
 8002970:	6033      	str	r3, [r6, #0]
 8002972:	2000      	movs	r0, #0
 8002974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002976:	f000 fdb1 	bl	80034dc <__malloc_lock>
 800297a:	4921      	ldr	r1, [pc, #132]	; (8002a00 <_malloc_r+0xac>)
 800297c:	680a      	ldr	r2, [r1, #0]
 800297e:	4614      	mov	r4, r2
 8002980:	b99c      	cbnz	r4, 80029aa <_malloc_r+0x56>
 8002982:	4f20      	ldr	r7, [pc, #128]	; (8002a04 <_malloc_r+0xb0>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b923      	cbnz	r3, 8002992 <_malloc_r+0x3e>
 8002988:	4621      	mov	r1, r4
 800298a:	4630      	mov	r0, r6
 800298c:	f000 fb2a 	bl	8002fe4 <_sbrk_r>
 8002990:	6038      	str	r0, [r7, #0]
 8002992:	4629      	mov	r1, r5
 8002994:	4630      	mov	r0, r6
 8002996:	f000 fb25 	bl	8002fe4 <_sbrk_r>
 800299a:	1c43      	adds	r3, r0, #1
 800299c:	d123      	bne.n	80029e6 <_malloc_r+0x92>
 800299e:	230c      	movs	r3, #12
 80029a0:	4630      	mov	r0, r6
 80029a2:	6033      	str	r3, [r6, #0]
 80029a4:	f000 fda0 	bl	80034e8 <__malloc_unlock>
 80029a8:	e7e3      	b.n	8002972 <_malloc_r+0x1e>
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	1b5b      	subs	r3, r3, r5
 80029ae:	d417      	bmi.n	80029e0 <_malloc_r+0x8c>
 80029b0:	2b0b      	cmp	r3, #11
 80029b2:	d903      	bls.n	80029bc <_malloc_r+0x68>
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	441c      	add	r4, r3
 80029b8:	6025      	str	r5, [r4, #0]
 80029ba:	e004      	b.n	80029c6 <_malloc_r+0x72>
 80029bc:	6863      	ldr	r3, [r4, #4]
 80029be:	42a2      	cmp	r2, r4
 80029c0:	bf0c      	ite	eq
 80029c2:	600b      	streq	r3, [r1, #0]
 80029c4:	6053      	strne	r3, [r2, #4]
 80029c6:	4630      	mov	r0, r6
 80029c8:	f000 fd8e 	bl	80034e8 <__malloc_unlock>
 80029cc:	f104 000b 	add.w	r0, r4, #11
 80029d0:	1d23      	adds	r3, r4, #4
 80029d2:	f020 0007 	bic.w	r0, r0, #7
 80029d6:	1ac2      	subs	r2, r0, r3
 80029d8:	d0cc      	beq.n	8002974 <_malloc_r+0x20>
 80029da:	1a1b      	subs	r3, r3, r0
 80029dc:	50a3      	str	r3, [r4, r2]
 80029de:	e7c9      	b.n	8002974 <_malloc_r+0x20>
 80029e0:	4622      	mov	r2, r4
 80029e2:	6864      	ldr	r4, [r4, #4]
 80029e4:	e7cc      	b.n	8002980 <_malloc_r+0x2c>
 80029e6:	1cc4      	adds	r4, r0, #3
 80029e8:	f024 0403 	bic.w	r4, r4, #3
 80029ec:	42a0      	cmp	r0, r4
 80029ee:	d0e3      	beq.n	80029b8 <_malloc_r+0x64>
 80029f0:	1a21      	subs	r1, r4, r0
 80029f2:	4630      	mov	r0, r6
 80029f4:	f000 faf6 	bl	8002fe4 <_sbrk_r>
 80029f8:	3001      	adds	r0, #1
 80029fa:	d1dd      	bne.n	80029b8 <_malloc_r+0x64>
 80029fc:	e7cf      	b.n	800299e <_malloc_r+0x4a>
 80029fe:	bf00      	nop
 8002a00:	2000009c 	.word	0x2000009c
 8002a04:	200000a0 	.word	0x200000a0

08002a08 <__sfputc_r>:
 8002a08:	6893      	ldr	r3, [r2, #8]
 8002a0a:	b410      	push	{r4}
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	6093      	str	r3, [r2, #8]
 8002a12:	da07      	bge.n	8002a24 <__sfputc_r+0x1c>
 8002a14:	6994      	ldr	r4, [r2, #24]
 8002a16:	42a3      	cmp	r3, r4
 8002a18:	db01      	blt.n	8002a1e <__sfputc_r+0x16>
 8002a1a:	290a      	cmp	r1, #10
 8002a1c:	d102      	bne.n	8002a24 <__sfputc_r+0x1c>
 8002a1e:	bc10      	pop	{r4}
 8002a20:	f000 bb34 	b.w	800308c <__swbuf_r>
 8002a24:	6813      	ldr	r3, [r2, #0]
 8002a26:	1c58      	adds	r0, r3, #1
 8002a28:	6010      	str	r0, [r2, #0]
 8002a2a:	7019      	strb	r1, [r3, #0]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	bc10      	pop	{r4}
 8002a30:	4770      	bx	lr

08002a32 <__sfputs_r>:
 8002a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a34:	4606      	mov	r6, r0
 8002a36:	460f      	mov	r7, r1
 8002a38:	4614      	mov	r4, r2
 8002a3a:	18d5      	adds	r5, r2, r3
 8002a3c:	42ac      	cmp	r4, r5
 8002a3e:	d101      	bne.n	8002a44 <__sfputs_r+0x12>
 8002a40:	2000      	movs	r0, #0
 8002a42:	e007      	b.n	8002a54 <__sfputs_r+0x22>
 8002a44:	463a      	mov	r2, r7
 8002a46:	4630      	mov	r0, r6
 8002a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a4c:	f7ff ffdc 	bl	8002a08 <__sfputc_r>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d1f3      	bne.n	8002a3c <__sfputs_r+0xa>
 8002a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a58 <_vfiprintf_r>:
 8002a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5c:	460d      	mov	r5, r1
 8002a5e:	4614      	mov	r4, r2
 8002a60:	4698      	mov	r8, r3
 8002a62:	4606      	mov	r6, r0
 8002a64:	b09d      	sub	sp, #116	; 0x74
 8002a66:	b118      	cbz	r0, 8002a70 <_vfiprintf_r+0x18>
 8002a68:	6983      	ldr	r3, [r0, #24]
 8002a6a:	b90b      	cbnz	r3, 8002a70 <_vfiprintf_r+0x18>
 8002a6c:	f7ff fed2 	bl	8002814 <__sinit>
 8002a70:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <_vfiprintf_r+0x240>)
 8002a72:	429d      	cmp	r5, r3
 8002a74:	d11b      	bne.n	8002aae <_vfiprintf_r+0x56>
 8002a76:	6875      	ldr	r5, [r6, #4]
 8002a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a7a:	07d9      	lsls	r1, r3, #31
 8002a7c:	d405      	bmi.n	8002a8a <_vfiprintf_r+0x32>
 8002a7e:	89ab      	ldrh	r3, [r5, #12]
 8002a80:	059a      	lsls	r2, r3, #22
 8002a82:	d402      	bmi.n	8002a8a <_vfiprintf_r+0x32>
 8002a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a86:	f7ff ff63 	bl	8002950 <__retarget_lock_acquire_recursive>
 8002a8a:	89ab      	ldrh	r3, [r5, #12]
 8002a8c:	071b      	lsls	r3, r3, #28
 8002a8e:	d501      	bpl.n	8002a94 <_vfiprintf_r+0x3c>
 8002a90:	692b      	ldr	r3, [r5, #16]
 8002a92:	b9eb      	cbnz	r3, 8002ad0 <_vfiprintf_r+0x78>
 8002a94:	4629      	mov	r1, r5
 8002a96:	4630      	mov	r0, r6
 8002a98:	f000 fb5c 	bl	8003154 <__swsetup_r>
 8002a9c:	b1c0      	cbz	r0, 8002ad0 <_vfiprintf_r+0x78>
 8002a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002aa0:	07dc      	lsls	r4, r3, #31
 8002aa2:	d50e      	bpl.n	8002ac2 <_vfiprintf_r+0x6a>
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa8:	b01d      	add	sp, #116	; 0x74
 8002aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aae:	4b7b      	ldr	r3, [pc, #492]	; (8002c9c <_vfiprintf_r+0x244>)
 8002ab0:	429d      	cmp	r5, r3
 8002ab2:	d101      	bne.n	8002ab8 <_vfiprintf_r+0x60>
 8002ab4:	68b5      	ldr	r5, [r6, #8]
 8002ab6:	e7df      	b.n	8002a78 <_vfiprintf_r+0x20>
 8002ab8:	4b79      	ldr	r3, [pc, #484]	; (8002ca0 <_vfiprintf_r+0x248>)
 8002aba:	429d      	cmp	r5, r3
 8002abc:	bf08      	it	eq
 8002abe:	68f5      	ldreq	r5, [r6, #12]
 8002ac0:	e7da      	b.n	8002a78 <_vfiprintf_r+0x20>
 8002ac2:	89ab      	ldrh	r3, [r5, #12]
 8002ac4:	0598      	lsls	r0, r3, #22
 8002ac6:	d4ed      	bmi.n	8002aa4 <_vfiprintf_r+0x4c>
 8002ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002aca:	f7ff ff42 	bl	8002952 <__retarget_lock_release_recursive>
 8002ace:	e7e9      	b.n	8002aa4 <_vfiprintf_r+0x4c>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ada:	2330      	movs	r3, #48	; 0x30
 8002adc:	f04f 0901 	mov.w	r9, #1
 8002ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ae4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002ca4 <_vfiprintf_r+0x24c>
 8002ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aec:	4623      	mov	r3, r4
 8002aee:	469a      	mov	sl, r3
 8002af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002af4:	b10a      	cbz	r2, 8002afa <_vfiprintf_r+0xa2>
 8002af6:	2a25      	cmp	r2, #37	; 0x25
 8002af8:	d1f9      	bne.n	8002aee <_vfiprintf_r+0x96>
 8002afa:	ebba 0b04 	subs.w	fp, sl, r4
 8002afe:	d00b      	beq.n	8002b18 <_vfiprintf_r+0xc0>
 8002b00:	465b      	mov	r3, fp
 8002b02:	4622      	mov	r2, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	4630      	mov	r0, r6
 8002b08:	f7ff ff93 	bl	8002a32 <__sfputs_r>
 8002b0c:	3001      	adds	r0, #1
 8002b0e:	f000 80aa 	beq.w	8002c66 <_vfiprintf_r+0x20e>
 8002b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b14:	445a      	add	r2, fp
 8002b16:	9209      	str	r2, [sp, #36]	; 0x24
 8002b18:	f89a 3000 	ldrb.w	r3, [sl]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a2 	beq.w	8002c66 <_vfiprintf_r+0x20e>
 8002b22:	2300      	movs	r3, #0
 8002b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b2c:	f10a 0a01 	add.w	sl, sl, #1
 8002b30:	9304      	str	r3, [sp, #16]
 8002b32:	9307      	str	r3, [sp, #28]
 8002b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b38:	931a      	str	r3, [sp, #104]	; 0x68
 8002b3a:	4654      	mov	r4, sl
 8002b3c:	2205      	movs	r2, #5
 8002b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b42:	4858      	ldr	r0, [pc, #352]	; (8002ca4 <_vfiprintf_r+0x24c>)
 8002b44:	f000 fcbc 	bl	80034c0 <memchr>
 8002b48:	9a04      	ldr	r2, [sp, #16]
 8002b4a:	b9d8      	cbnz	r0, 8002b84 <_vfiprintf_r+0x12c>
 8002b4c:	06d1      	lsls	r1, r2, #27
 8002b4e:	bf44      	itt	mi
 8002b50:	2320      	movmi	r3, #32
 8002b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b56:	0713      	lsls	r3, r2, #28
 8002b58:	bf44      	itt	mi
 8002b5a:	232b      	movmi	r3, #43	; 0x2b
 8002b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b60:	f89a 3000 	ldrb.w	r3, [sl]
 8002b64:	2b2a      	cmp	r3, #42	; 0x2a
 8002b66:	d015      	beq.n	8002b94 <_vfiprintf_r+0x13c>
 8002b68:	4654      	mov	r4, sl
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f04f 0c0a 	mov.w	ip, #10
 8002b70:	9a07      	ldr	r2, [sp, #28]
 8002b72:	4621      	mov	r1, r4
 8002b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b78:	3b30      	subs	r3, #48	; 0x30
 8002b7a:	2b09      	cmp	r3, #9
 8002b7c:	d94e      	bls.n	8002c1c <_vfiprintf_r+0x1c4>
 8002b7e:	b1b0      	cbz	r0, 8002bae <_vfiprintf_r+0x156>
 8002b80:	9207      	str	r2, [sp, #28]
 8002b82:	e014      	b.n	8002bae <_vfiprintf_r+0x156>
 8002b84:	eba0 0308 	sub.w	r3, r0, r8
 8002b88:	fa09 f303 	lsl.w	r3, r9, r3
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	46a2      	mov	sl, r4
 8002b90:	9304      	str	r3, [sp, #16]
 8002b92:	e7d2      	b.n	8002b3a <_vfiprintf_r+0xe2>
 8002b94:	9b03      	ldr	r3, [sp, #12]
 8002b96:	1d19      	adds	r1, r3, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	9103      	str	r1, [sp, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bfbb      	ittet	lt
 8002ba0:	425b      	neglt	r3, r3
 8002ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8002ba6:	9307      	strge	r3, [sp, #28]
 8002ba8:	9307      	strlt	r3, [sp, #28]
 8002baa:	bfb8      	it	lt
 8002bac:	9204      	strlt	r2, [sp, #16]
 8002bae:	7823      	ldrb	r3, [r4, #0]
 8002bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8002bb2:	d10c      	bne.n	8002bce <_vfiprintf_r+0x176>
 8002bb4:	7863      	ldrb	r3, [r4, #1]
 8002bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb8:	d135      	bne.n	8002c26 <_vfiprintf_r+0x1ce>
 8002bba:	9b03      	ldr	r3, [sp, #12]
 8002bbc:	3402      	adds	r4, #2
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	9203      	str	r2, [sp, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bfb8      	it	lt
 8002bc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002bcc:	9305      	str	r3, [sp, #20]
 8002bce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002cb4 <_vfiprintf_r+0x25c>
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	4650      	mov	r0, sl
 8002bd6:	7821      	ldrb	r1, [r4, #0]
 8002bd8:	f000 fc72 	bl	80034c0 <memchr>
 8002bdc:	b140      	cbz	r0, 8002bf0 <_vfiprintf_r+0x198>
 8002bde:	2340      	movs	r3, #64	; 0x40
 8002be0:	eba0 000a 	sub.w	r0, r0, sl
 8002be4:	fa03 f000 	lsl.w	r0, r3, r0
 8002be8:	9b04      	ldr	r3, [sp, #16]
 8002bea:	3401      	adds	r4, #1
 8002bec:	4303      	orrs	r3, r0
 8002bee:	9304      	str	r3, [sp, #16]
 8002bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bf4:	2206      	movs	r2, #6
 8002bf6:	482c      	ldr	r0, [pc, #176]	; (8002ca8 <_vfiprintf_r+0x250>)
 8002bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bfc:	f000 fc60 	bl	80034c0 <memchr>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d03f      	beq.n	8002c84 <_vfiprintf_r+0x22c>
 8002c04:	4b29      	ldr	r3, [pc, #164]	; (8002cac <_vfiprintf_r+0x254>)
 8002c06:	bb1b      	cbnz	r3, 8002c50 <_vfiprintf_r+0x1f8>
 8002c08:	9b03      	ldr	r3, [sp, #12]
 8002c0a:	3307      	adds	r3, #7
 8002c0c:	f023 0307 	bic.w	r3, r3, #7
 8002c10:	3308      	adds	r3, #8
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c16:	443b      	add	r3, r7
 8002c18:	9309      	str	r3, [sp, #36]	; 0x24
 8002c1a:	e767      	b.n	8002aec <_vfiprintf_r+0x94>
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	2001      	movs	r0, #1
 8002c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c24:	e7a5      	b.n	8002b72 <_vfiprintf_r+0x11a>
 8002c26:	2300      	movs	r3, #0
 8002c28:	f04f 0c0a 	mov.w	ip, #10
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	3401      	adds	r4, #1
 8002c30:	9305      	str	r3, [sp, #20]
 8002c32:	4620      	mov	r0, r4
 8002c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c38:	3a30      	subs	r2, #48	; 0x30
 8002c3a:	2a09      	cmp	r2, #9
 8002c3c:	d903      	bls.n	8002c46 <_vfiprintf_r+0x1ee>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0c5      	beq.n	8002bce <_vfiprintf_r+0x176>
 8002c42:	9105      	str	r1, [sp, #20]
 8002c44:	e7c3      	b.n	8002bce <_vfiprintf_r+0x176>
 8002c46:	4604      	mov	r4, r0
 8002c48:	2301      	movs	r3, #1
 8002c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c4e:	e7f0      	b.n	8002c32 <_vfiprintf_r+0x1da>
 8002c50:	ab03      	add	r3, sp, #12
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	462a      	mov	r2, r5
 8002c56:	4630      	mov	r0, r6
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <_vfiprintf_r+0x258>)
 8002c5a:	a904      	add	r1, sp, #16
 8002c5c:	f3af 8000 	nop.w
 8002c60:	4607      	mov	r7, r0
 8002c62:	1c78      	adds	r0, r7, #1
 8002c64:	d1d6      	bne.n	8002c14 <_vfiprintf_r+0x1bc>
 8002c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c68:	07d9      	lsls	r1, r3, #31
 8002c6a:	d405      	bmi.n	8002c78 <_vfiprintf_r+0x220>
 8002c6c:	89ab      	ldrh	r3, [r5, #12]
 8002c6e:	059a      	lsls	r2, r3, #22
 8002c70:	d402      	bmi.n	8002c78 <_vfiprintf_r+0x220>
 8002c72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c74:	f7ff fe6d 	bl	8002952 <__retarget_lock_release_recursive>
 8002c78:	89ab      	ldrh	r3, [r5, #12]
 8002c7a:	065b      	lsls	r3, r3, #25
 8002c7c:	f53f af12 	bmi.w	8002aa4 <_vfiprintf_r+0x4c>
 8002c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c82:	e711      	b.n	8002aa8 <_vfiprintf_r+0x50>
 8002c84:	ab03      	add	r3, sp, #12
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	462a      	mov	r2, r5
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <_vfiprintf_r+0x258>)
 8002c8e:	a904      	add	r1, sp, #16
 8002c90:	f000 f882 	bl	8002d98 <_printf_i>
 8002c94:	e7e4      	b.n	8002c60 <_vfiprintf_r+0x208>
 8002c96:	bf00      	nop
 8002c98:	08003904 	.word	0x08003904
 8002c9c:	08003924 	.word	0x08003924
 8002ca0:	080038e4 	.word	0x080038e4
 8002ca4:	08003944 	.word	0x08003944
 8002ca8:	0800394e 	.word	0x0800394e
 8002cac:	00000000 	.word	0x00000000
 8002cb0:	08002a33 	.word	0x08002a33
 8002cb4:	0800394a 	.word	0x0800394a

08002cb8 <_printf_common>:
 8002cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cbc:	4616      	mov	r6, r2
 8002cbe:	4699      	mov	r9, r3
 8002cc0:	688a      	ldr	r2, [r1, #8]
 8002cc2:	690b      	ldr	r3, [r1, #16]
 8002cc4:	4607      	mov	r7, r0
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	bfb8      	it	lt
 8002cca:	4613      	movlt	r3, r2
 8002ccc:	6033      	str	r3, [r6, #0]
 8002cce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cd8:	b10a      	cbz	r2, 8002cde <_printf_common+0x26>
 8002cda:	3301      	adds	r3, #1
 8002cdc:	6033      	str	r3, [r6, #0]
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	0699      	lsls	r1, r3, #26
 8002ce2:	bf42      	ittt	mi
 8002ce4:	6833      	ldrmi	r3, [r6, #0]
 8002ce6:	3302      	addmi	r3, #2
 8002ce8:	6033      	strmi	r3, [r6, #0]
 8002cea:	6825      	ldr	r5, [r4, #0]
 8002cec:	f015 0506 	ands.w	r5, r5, #6
 8002cf0:	d106      	bne.n	8002d00 <_printf_common+0x48>
 8002cf2:	f104 0a19 	add.w	sl, r4, #25
 8002cf6:	68e3      	ldr	r3, [r4, #12]
 8002cf8:	6832      	ldr	r2, [r6, #0]
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	42ab      	cmp	r3, r5
 8002cfe:	dc28      	bgt.n	8002d52 <_printf_common+0x9a>
 8002d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d04:	1e13      	subs	r3, r2, #0
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	bf18      	it	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	0692      	lsls	r2, r2, #26
 8002d0e:	d42d      	bmi.n	8002d6c <_printf_common+0xb4>
 8002d10:	4649      	mov	r1, r9
 8002d12:	4638      	mov	r0, r7
 8002d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d18:	47c0      	blx	r8
 8002d1a:	3001      	adds	r0, #1
 8002d1c:	d020      	beq.n	8002d60 <_printf_common+0xa8>
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	68e5      	ldr	r5, [r4, #12]
 8002d22:	f003 0306 	and.w	r3, r3, #6
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf18      	it	ne
 8002d2a:	2500      	movne	r5, #0
 8002d2c:	6832      	ldr	r2, [r6, #0]
 8002d2e:	f04f 0600 	mov.w	r6, #0
 8002d32:	68a3      	ldr	r3, [r4, #8]
 8002d34:	bf08      	it	eq
 8002d36:	1aad      	subeq	r5, r5, r2
 8002d38:	6922      	ldr	r2, [r4, #16]
 8002d3a:	bf08      	it	eq
 8002d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bfc4      	itt	gt
 8002d44:	1a9b      	subgt	r3, r3, r2
 8002d46:	18ed      	addgt	r5, r5, r3
 8002d48:	341a      	adds	r4, #26
 8002d4a:	42b5      	cmp	r5, r6
 8002d4c:	d11a      	bne.n	8002d84 <_printf_common+0xcc>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	e008      	b.n	8002d64 <_printf_common+0xac>
 8002d52:	2301      	movs	r3, #1
 8002d54:	4652      	mov	r2, sl
 8002d56:	4649      	mov	r1, r9
 8002d58:	4638      	mov	r0, r7
 8002d5a:	47c0      	blx	r8
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	d103      	bne.n	8002d68 <_printf_common+0xb0>
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d68:	3501      	adds	r5, #1
 8002d6a:	e7c4      	b.n	8002cf6 <_printf_common+0x3e>
 8002d6c:	2030      	movs	r0, #48	; 0x30
 8002d6e:	18e1      	adds	r1, r4, r3
 8002d70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d7a:	4422      	add	r2, r4
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d82:	e7c5      	b.n	8002d10 <_printf_common+0x58>
 8002d84:	2301      	movs	r3, #1
 8002d86:	4622      	mov	r2, r4
 8002d88:	4649      	mov	r1, r9
 8002d8a:	4638      	mov	r0, r7
 8002d8c:	47c0      	blx	r8
 8002d8e:	3001      	adds	r0, #1
 8002d90:	d0e6      	beq.n	8002d60 <_printf_common+0xa8>
 8002d92:	3601      	adds	r6, #1
 8002d94:	e7d9      	b.n	8002d4a <_printf_common+0x92>
	...

08002d98 <_printf_i>:
 8002d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d9c:	460c      	mov	r4, r1
 8002d9e:	7e27      	ldrb	r7, [r4, #24]
 8002da0:	4691      	mov	r9, r2
 8002da2:	2f78      	cmp	r7, #120	; 0x78
 8002da4:	4680      	mov	r8, r0
 8002da6:	469a      	mov	sl, r3
 8002da8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002daa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dae:	d807      	bhi.n	8002dc0 <_printf_i+0x28>
 8002db0:	2f62      	cmp	r7, #98	; 0x62
 8002db2:	d80a      	bhi.n	8002dca <_printf_i+0x32>
 8002db4:	2f00      	cmp	r7, #0
 8002db6:	f000 80d9 	beq.w	8002f6c <_printf_i+0x1d4>
 8002dba:	2f58      	cmp	r7, #88	; 0x58
 8002dbc:	f000 80a4 	beq.w	8002f08 <_printf_i+0x170>
 8002dc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dc8:	e03a      	b.n	8002e40 <_printf_i+0xa8>
 8002dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dce:	2b15      	cmp	r3, #21
 8002dd0:	d8f6      	bhi.n	8002dc0 <_printf_i+0x28>
 8002dd2:	a001      	add	r0, pc, #4	; (adr r0, 8002dd8 <_printf_i+0x40>)
 8002dd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002dd8:	08002e31 	.word	0x08002e31
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002dc1 	.word	0x08002dc1
 8002de4:	08002dc1 	.word	0x08002dc1
 8002de8:	08002dc1 	.word	0x08002dc1
 8002dec:	08002dc1 	.word	0x08002dc1
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002dc1 	.word	0x08002dc1
 8002df8:	08002dc1 	.word	0x08002dc1
 8002dfc:	08002dc1 	.word	0x08002dc1
 8002e00:	08002dc1 	.word	0x08002dc1
 8002e04:	08002f53 	.word	0x08002f53
 8002e08:	08002e75 	.word	0x08002e75
 8002e0c:	08002f35 	.word	0x08002f35
 8002e10:	08002dc1 	.word	0x08002dc1
 8002e14:	08002dc1 	.word	0x08002dc1
 8002e18:	08002f75 	.word	0x08002f75
 8002e1c:	08002dc1 	.word	0x08002dc1
 8002e20:	08002e75 	.word	0x08002e75
 8002e24:	08002dc1 	.word	0x08002dc1
 8002e28:	08002dc1 	.word	0x08002dc1
 8002e2c:	08002f3d 	.word	0x08002f3d
 8002e30:	680b      	ldr	r3, [r1, #0]
 8002e32:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e36:	1d1a      	adds	r2, r3, #4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	600a      	str	r2, [r1, #0]
 8002e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0a4      	b.n	8002f8e <_printf_i+0x1f6>
 8002e44:	6825      	ldr	r5, [r4, #0]
 8002e46:	6808      	ldr	r0, [r1, #0]
 8002e48:	062e      	lsls	r6, r5, #24
 8002e4a:	f100 0304 	add.w	r3, r0, #4
 8002e4e:	d50a      	bpl.n	8002e66 <_printf_i+0xce>
 8002e50:	6805      	ldr	r5, [r0, #0]
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	2d00      	cmp	r5, #0
 8002e56:	da03      	bge.n	8002e60 <_printf_i+0xc8>
 8002e58:	232d      	movs	r3, #45	; 0x2d
 8002e5a:	426d      	negs	r5, r5
 8002e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e60:	230a      	movs	r3, #10
 8002e62:	485e      	ldr	r0, [pc, #376]	; (8002fdc <_printf_i+0x244>)
 8002e64:	e019      	b.n	8002e9a <_printf_i+0x102>
 8002e66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e6a:	6805      	ldr	r5, [r0, #0]
 8002e6c:	600b      	str	r3, [r1, #0]
 8002e6e:	bf18      	it	ne
 8002e70:	b22d      	sxthne	r5, r5
 8002e72:	e7ef      	b.n	8002e54 <_printf_i+0xbc>
 8002e74:	680b      	ldr	r3, [r1, #0]
 8002e76:	6825      	ldr	r5, [r4, #0]
 8002e78:	1d18      	adds	r0, r3, #4
 8002e7a:	6008      	str	r0, [r1, #0]
 8002e7c:	0628      	lsls	r0, r5, #24
 8002e7e:	d501      	bpl.n	8002e84 <_printf_i+0xec>
 8002e80:	681d      	ldr	r5, [r3, #0]
 8002e82:	e002      	b.n	8002e8a <_printf_i+0xf2>
 8002e84:	0669      	lsls	r1, r5, #25
 8002e86:	d5fb      	bpl.n	8002e80 <_printf_i+0xe8>
 8002e88:	881d      	ldrh	r5, [r3, #0]
 8002e8a:	2f6f      	cmp	r7, #111	; 0x6f
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2308      	moveq	r3, #8
 8002e90:	230a      	movne	r3, #10
 8002e92:	4852      	ldr	r0, [pc, #328]	; (8002fdc <_printf_i+0x244>)
 8002e94:	2100      	movs	r1, #0
 8002e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e9a:	6866      	ldr	r6, [r4, #4]
 8002e9c:	2e00      	cmp	r6, #0
 8002e9e:	bfa8      	it	ge
 8002ea0:	6821      	ldrge	r1, [r4, #0]
 8002ea2:	60a6      	str	r6, [r4, #8]
 8002ea4:	bfa4      	itt	ge
 8002ea6:	f021 0104 	bicge.w	r1, r1, #4
 8002eaa:	6021      	strge	r1, [r4, #0]
 8002eac:	b90d      	cbnz	r5, 8002eb2 <_printf_i+0x11a>
 8002eae:	2e00      	cmp	r6, #0
 8002eb0:	d04d      	beq.n	8002f4e <_printf_i+0x1b6>
 8002eb2:	4616      	mov	r6, r2
 8002eb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002eb8:	fb03 5711 	mls	r7, r3, r1, r5
 8002ebc:	5dc7      	ldrb	r7, [r0, r7]
 8002ebe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ec2:	462f      	mov	r7, r5
 8002ec4:	42bb      	cmp	r3, r7
 8002ec6:	460d      	mov	r5, r1
 8002ec8:	d9f4      	bls.n	8002eb4 <_printf_i+0x11c>
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d10b      	bne.n	8002ee6 <_printf_i+0x14e>
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	07df      	lsls	r7, r3, #31
 8002ed2:	d508      	bpl.n	8002ee6 <_printf_i+0x14e>
 8002ed4:	6923      	ldr	r3, [r4, #16]
 8002ed6:	6861      	ldr	r1, [r4, #4]
 8002ed8:	4299      	cmp	r1, r3
 8002eda:	bfde      	ittt	le
 8002edc:	2330      	movle	r3, #48	; 0x30
 8002ede:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ee2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002ee6:	1b92      	subs	r2, r2, r6
 8002ee8:	6122      	str	r2, [r4, #16]
 8002eea:	464b      	mov	r3, r9
 8002eec:	4621      	mov	r1, r4
 8002eee:	4640      	mov	r0, r8
 8002ef0:	f8cd a000 	str.w	sl, [sp]
 8002ef4:	aa03      	add	r2, sp, #12
 8002ef6:	f7ff fedf 	bl	8002cb8 <_printf_common>
 8002efa:	3001      	adds	r0, #1
 8002efc:	d14c      	bne.n	8002f98 <_printf_i+0x200>
 8002efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f02:	b004      	add	sp, #16
 8002f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f08:	4834      	ldr	r0, [pc, #208]	; (8002fdc <_printf_i+0x244>)
 8002f0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f0e:	680e      	ldr	r6, [r1, #0]
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f16:	061f      	lsls	r7, r3, #24
 8002f18:	600e      	str	r6, [r1, #0]
 8002f1a:	d514      	bpl.n	8002f46 <_printf_i+0x1ae>
 8002f1c:	07d9      	lsls	r1, r3, #31
 8002f1e:	bf44      	itt	mi
 8002f20:	f043 0320 	orrmi.w	r3, r3, #32
 8002f24:	6023      	strmi	r3, [r4, #0]
 8002f26:	b91d      	cbnz	r5, 8002f30 <_printf_i+0x198>
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	f023 0320 	bic.w	r3, r3, #32
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	2310      	movs	r3, #16
 8002f32:	e7af      	b.n	8002e94 <_printf_i+0xfc>
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	f043 0320 	orr.w	r3, r3, #32
 8002f3a:	6023      	str	r3, [r4, #0]
 8002f3c:	2378      	movs	r3, #120	; 0x78
 8002f3e:	4828      	ldr	r0, [pc, #160]	; (8002fe0 <_printf_i+0x248>)
 8002f40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f44:	e7e3      	b.n	8002f0e <_printf_i+0x176>
 8002f46:	065e      	lsls	r6, r3, #25
 8002f48:	bf48      	it	mi
 8002f4a:	b2ad      	uxthmi	r5, r5
 8002f4c:	e7e6      	b.n	8002f1c <_printf_i+0x184>
 8002f4e:	4616      	mov	r6, r2
 8002f50:	e7bb      	b.n	8002eca <_printf_i+0x132>
 8002f52:	680b      	ldr	r3, [r1, #0]
 8002f54:	6826      	ldr	r6, [r4, #0]
 8002f56:	1d1d      	adds	r5, r3, #4
 8002f58:	6960      	ldr	r0, [r4, #20]
 8002f5a:	600d      	str	r5, [r1, #0]
 8002f5c:	0635      	lsls	r5, r6, #24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	d501      	bpl.n	8002f66 <_printf_i+0x1ce>
 8002f62:	6018      	str	r0, [r3, #0]
 8002f64:	e002      	b.n	8002f6c <_printf_i+0x1d4>
 8002f66:	0671      	lsls	r1, r6, #25
 8002f68:	d5fb      	bpl.n	8002f62 <_printf_i+0x1ca>
 8002f6a:	8018      	strh	r0, [r3, #0]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	4616      	mov	r6, r2
 8002f70:	6123      	str	r3, [r4, #16]
 8002f72:	e7ba      	b.n	8002eea <_printf_i+0x152>
 8002f74:	680b      	ldr	r3, [r1, #0]
 8002f76:	1d1a      	adds	r2, r3, #4
 8002f78:	600a      	str	r2, [r1, #0]
 8002f7a:	681e      	ldr	r6, [r3, #0]
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4630      	mov	r0, r6
 8002f80:	6862      	ldr	r2, [r4, #4]
 8002f82:	f000 fa9d 	bl	80034c0 <memchr>
 8002f86:	b108      	cbz	r0, 8002f8c <_printf_i+0x1f4>
 8002f88:	1b80      	subs	r0, r0, r6
 8002f8a:	6060      	str	r0, [r4, #4]
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	6123      	str	r3, [r4, #16]
 8002f90:	2300      	movs	r3, #0
 8002f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f96:	e7a8      	b.n	8002eea <_printf_i+0x152>
 8002f98:	4632      	mov	r2, r6
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	4640      	mov	r0, r8
 8002f9e:	6923      	ldr	r3, [r4, #16]
 8002fa0:	47d0      	blx	sl
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d0ab      	beq.n	8002efe <_printf_i+0x166>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	079b      	lsls	r3, r3, #30
 8002faa:	d413      	bmi.n	8002fd4 <_printf_i+0x23c>
 8002fac:	68e0      	ldr	r0, [r4, #12]
 8002fae:	9b03      	ldr	r3, [sp, #12]
 8002fb0:	4298      	cmp	r0, r3
 8002fb2:	bfb8      	it	lt
 8002fb4:	4618      	movlt	r0, r3
 8002fb6:	e7a4      	b.n	8002f02 <_printf_i+0x16a>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	4632      	mov	r2, r6
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	47d0      	blx	sl
 8002fc2:	3001      	adds	r0, #1
 8002fc4:	d09b      	beq.n	8002efe <_printf_i+0x166>
 8002fc6:	3501      	adds	r5, #1
 8002fc8:	68e3      	ldr	r3, [r4, #12]
 8002fca:	9903      	ldr	r1, [sp, #12]
 8002fcc:	1a5b      	subs	r3, r3, r1
 8002fce:	42ab      	cmp	r3, r5
 8002fd0:	dcf2      	bgt.n	8002fb8 <_printf_i+0x220>
 8002fd2:	e7eb      	b.n	8002fac <_printf_i+0x214>
 8002fd4:	2500      	movs	r5, #0
 8002fd6:	f104 0619 	add.w	r6, r4, #25
 8002fda:	e7f5      	b.n	8002fc8 <_printf_i+0x230>
 8002fdc:	08003955 	.word	0x08003955
 8002fe0:	08003966 	.word	0x08003966

08002fe4 <_sbrk_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	4d05      	ldr	r5, [pc, #20]	; (8003000 <_sbrk_r+0x1c>)
 8002fea:	4604      	mov	r4, r0
 8002fec:	4608      	mov	r0, r1
 8002fee:	602b      	str	r3, [r5, #0]
 8002ff0:	f7fd ff10 	bl	8000e14 <_sbrk>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d102      	bne.n	8002ffe <_sbrk_r+0x1a>
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	b103      	cbz	r3, 8002ffe <_sbrk_r+0x1a>
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	2000015c 	.word	0x2000015c

08003004 <__sread>:
 8003004:	b510      	push	{r4, lr}
 8003006:	460c      	mov	r4, r1
 8003008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800300c:	f000 fabe 	bl	800358c <_read_r>
 8003010:	2800      	cmp	r0, #0
 8003012:	bfab      	itete	ge
 8003014:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003016:	89a3      	ldrhlt	r3, [r4, #12]
 8003018:	181b      	addge	r3, r3, r0
 800301a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800301e:	bfac      	ite	ge
 8003020:	6563      	strge	r3, [r4, #84]	; 0x54
 8003022:	81a3      	strhlt	r3, [r4, #12]
 8003024:	bd10      	pop	{r4, pc}

08003026 <__swrite>:
 8003026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800302a:	461f      	mov	r7, r3
 800302c:	898b      	ldrh	r3, [r1, #12]
 800302e:	4605      	mov	r5, r0
 8003030:	05db      	lsls	r3, r3, #23
 8003032:	460c      	mov	r4, r1
 8003034:	4616      	mov	r6, r2
 8003036:	d505      	bpl.n	8003044 <__swrite+0x1e>
 8003038:	2302      	movs	r3, #2
 800303a:	2200      	movs	r2, #0
 800303c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003040:	f000 f9c8 	bl	80033d4 <_lseek_r>
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	4632      	mov	r2, r6
 8003048:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800304c:	81a3      	strh	r3, [r4, #12]
 800304e:	4628      	mov	r0, r5
 8003050:	463b      	mov	r3, r7
 8003052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800305a:	f000 b869 	b.w	8003130 <_write_r>

0800305e <__sseek>:
 800305e:	b510      	push	{r4, lr}
 8003060:	460c      	mov	r4, r1
 8003062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003066:	f000 f9b5 	bl	80033d4 <_lseek_r>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	89a3      	ldrh	r3, [r4, #12]
 800306e:	bf15      	itete	ne
 8003070:	6560      	strne	r0, [r4, #84]	; 0x54
 8003072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800307a:	81a3      	strheq	r3, [r4, #12]
 800307c:	bf18      	it	ne
 800307e:	81a3      	strhne	r3, [r4, #12]
 8003080:	bd10      	pop	{r4, pc}

08003082 <__sclose>:
 8003082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003086:	f000 b8d3 	b.w	8003230 <_close_r>
	...

0800308c <__swbuf_r>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	460e      	mov	r6, r1
 8003090:	4614      	mov	r4, r2
 8003092:	4605      	mov	r5, r0
 8003094:	b118      	cbz	r0, 800309e <__swbuf_r+0x12>
 8003096:	6983      	ldr	r3, [r0, #24]
 8003098:	b90b      	cbnz	r3, 800309e <__swbuf_r+0x12>
 800309a:	f7ff fbbb 	bl	8002814 <__sinit>
 800309e:	4b21      	ldr	r3, [pc, #132]	; (8003124 <__swbuf_r+0x98>)
 80030a0:	429c      	cmp	r4, r3
 80030a2:	d12b      	bne.n	80030fc <__swbuf_r+0x70>
 80030a4:	686c      	ldr	r4, [r5, #4]
 80030a6:	69a3      	ldr	r3, [r4, #24]
 80030a8:	60a3      	str	r3, [r4, #8]
 80030aa:	89a3      	ldrh	r3, [r4, #12]
 80030ac:	071a      	lsls	r2, r3, #28
 80030ae:	d52f      	bpl.n	8003110 <__swbuf_r+0x84>
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	b36b      	cbz	r3, 8003110 <__swbuf_r+0x84>
 80030b4:	6923      	ldr	r3, [r4, #16]
 80030b6:	6820      	ldr	r0, [r4, #0]
 80030b8:	b2f6      	uxtb	r6, r6
 80030ba:	1ac0      	subs	r0, r0, r3
 80030bc:	6963      	ldr	r3, [r4, #20]
 80030be:	4637      	mov	r7, r6
 80030c0:	4283      	cmp	r3, r0
 80030c2:	dc04      	bgt.n	80030ce <__swbuf_r+0x42>
 80030c4:	4621      	mov	r1, r4
 80030c6:	4628      	mov	r0, r5
 80030c8:	f000 f948 	bl	800335c <_fflush_r>
 80030cc:	bb30      	cbnz	r0, 800311c <__swbuf_r+0x90>
 80030ce:	68a3      	ldr	r3, [r4, #8]
 80030d0:	3001      	adds	r0, #1
 80030d2:	3b01      	subs	r3, #1
 80030d4:	60a3      	str	r3, [r4, #8]
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	6022      	str	r2, [r4, #0]
 80030dc:	701e      	strb	r6, [r3, #0]
 80030de:	6963      	ldr	r3, [r4, #20]
 80030e0:	4283      	cmp	r3, r0
 80030e2:	d004      	beq.n	80030ee <__swbuf_r+0x62>
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	07db      	lsls	r3, r3, #31
 80030e8:	d506      	bpl.n	80030f8 <__swbuf_r+0x6c>
 80030ea:	2e0a      	cmp	r6, #10
 80030ec:	d104      	bne.n	80030f8 <__swbuf_r+0x6c>
 80030ee:	4621      	mov	r1, r4
 80030f0:	4628      	mov	r0, r5
 80030f2:	f000 f933 	bl	800335c <_fflush_r>
 80030f6:	b988      	cbnz	r0, 800311c <__swbuf_r+0x90>
 80030f8:	4638      	mov	r0, r7
 80030fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <__swbuf_r+0x9c>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d101      	bne.n	8003106 <__swbuf_r+0x7a>
 8003102:	68ac      	ldr	r4, [r5, #8]
 8003104:	e7cf      	b.n	80030a6 <__swbuf_r+0x1a>
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <__swbuf_r+0xa0>)
 8003108:	429c      	cmp	r4, r3
 800310a:	bf08      	it	eq
 800310c:	68ec      	ldreq	r4, [r5, #12]
 800310e:	e7ca      	b.n	80030a6 <__swbuf_r+0x1a>
 8003110:	4621      	mov	r1, r4
 8003112:	4628      	mov	r0, r5
 8003114:	f000 f81e 	bl	8003154 <__swsetup_r>
 8003118:	2800      	cmp	r0, #0
 800311a:	d0cb      	beq.n	80030b4 <__swbuf_r+0x28>
 800311c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003120:	e7ea      	b.n	80030f8 <__swbuf_r+0x6c>
 8003122:	bf00      	nop
 8003124:	08003904 	.word	0x08003904
 8003128:	08003924 	.word	0x08003924
 800312c:	080038e4 	.word	0x080038e4

08003130 <_write_r>:
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	4604      	mov	r4, r0
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	2200      	movs	r2, #0
 800313a:	4d05      	ldr	r5, [pc, #20]	; (8003150 <_write_r+0x20>)
 800313c:	602a      	str	r2, [r5, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	f7fd fd20 	bl	8000b84 <_write>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d102      	bne.n	800314e <_write_r+0x1e>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	b103      	cbz	r3, 800314e <_write_r+0x1e>
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	2000015c 	.word	0x2000015c

08003154 <__swsetup_r>:
 8003154:	4b32      	ldr	r3, [pc, #200]	; (8003220 <__swsetup_r+0xcc>)
 8003156:	b570      	push	{r4, r5, r6, lr}
 8003158:	681d      	ldr	r5, [r3, #0]
 800315a:	4606      	mov	r6, r0
 800315c:	460c      	mov	r4, r1
 800315e:	b125      	cbz	r5, 800316a <__swsetup_r+0x16>
 8003160:	69ab      	ldr	r3, [r5, #24]
 8003162:	b913      	cbnz	r3, 800316a <__swsetup_r+0x16>
 8003164:	4628      	mov	r0, r5
 8003166:	f7ff fb55 	bl	8002814 <__sinit>
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <__swsetup_r+0xd0>)
 800316c:	429c      	cmp	r4, r3
 800316e:	d10f      	bne.n	8003190 <__swsetup_r+0x3c>
 8003170:	686c      	ldr	r4, [r5, #4]
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003178:	0719      	lsls	r1, r3, #28
 800317a:	d42c      	bmi.n	80031d6 <__swsetup_r+0x82>
 800317c:	06dd      	lsls	r5, r3, #27
 800317e:	d411      	bmi.n	80031a4 <__swsetup_r+0x50>
 8003180:	2309      	movs	r3, #9
 8003182:	6033      	str	r3, [r6, #0]
 8003184:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800318c:	81a3      	strh	r3, [r4, #12]
 800318e:	e03e      	b.n	800320e <__swsetup_r+0xba>
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <__swsetup_r+0xd4>)
 8003192:	429c      	cmp	r4, r3
 8003194:	d101      	bne.n	800319a <__swsetup_r+0x46>
 8003196:	68ac      	ldr	r4, [r5, #8]
 8003198:	e7eb      	b.n	8003172 <__swsetup_r+0x1e>
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <__swsetup_r+0xd8>)
 800319c:	429c      	cmp	r4, r3
 800319e:	bf08      	it	eq
 80031a0:	68ec      	ldreq	r4, [r5, #12]
 80031a2:	e7e6      	b.n	8003172 <__swsetup_r+0x1e>
 80031a4:	0758      	lsls	r0, r3, #29
 80031a6:	d512      	bpl.n	80031ce <__swsetup_r+0x7a>
 80031a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031aa:	b141      	cbz	r1, 80031be <__swsetup_r+0x6a>
 80031ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031b0:	4299      	cmp	r1, r3
 80031b2:	d002      	beq.n	80031ba <__swsetup_r+0x66>
 80031b4:	4630      	mov	r0, r6
 80031b6:	f000 f99d 	bl	80034f4 <_free_r>
 80031ba:	2300      	movs	r3, #0
 80031bc:	6363      	str	r3, [r4, #52]	; 0x34
 80031be:	89a3      	ldrh	r3, [r4, #12]
 80031c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031c4:	81a3      	strh	r3, [r4, #12]
 80031c6:	2300      	movs	r3, #0
 80031c8:	6063      	str	r3, [r4, #4]
 80031ca:	6923      	ldr	r3, [r4, #16]
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	89a3      	ldrh	r3, [r4, #12]
 80031d0:	f043 0308 	orr.w	r3, r3, #8
 80031d4:	81a3      	strh	r3, [r4, #12]
 80031d6:	6923      	ldr	r3, [r4, #16]
 80031d8:	b94b      	cbnz	r3, 80031ee <__swsetup_r+0x9a>
 80031da:	89a3      	ldrh	r3, [r4, #12]
 80031dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e4:	d003      	beq.n	80031ee <__swsetup_r+0x9a>
 80031e6:	4621      	mov	r1, r4
 80031e8:	4630      	mov	r0, r6
 80031ea:	f000 f929 	bl	8003440 <__smakebuf_r>
 80031ee:	89a0      	ldrh	r0, [r4, #12]
 80031f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031f4:	f010 0301 	ands.w	r3, r0, #1
 80031f8:	d00a      	beq.n	8003210 <__swsetup_r+0xbc>
 80031fa:	2300      	movs	r3, #0
 80031fc:	60a3      	str	r3, [r4, #8]
 80031fe:	6963      	ldr	r3, [r4, #20]
 8003200:	425b      	negs	r3, r3
 8003202:	61a3      	str	r3, [r4, #24]
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	b943      	cbnz	r3, 800321a <__swsetup_r+0xc6>
 8003208:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800320c:	d1ba      	bne.n	8003184 <__swsetup_r+0x30>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	0781      	lsls	r1, r0, #30
 8003212:	bf58      	it	pl
 8003214:	6963      	ldrpl	r3, [r4, #20]
 8003216:	60a3      	str	r3, [r4, #8]
 8003218:	e7f4      	b.n	8003204 <__swsetup_r+0xb0>
 800321a:	2000      	movs	r0, #0
 800321c:	e7f7      	b.n	800320e <__swsetup_r+0xba>
 800321e:	bf00      	nop
 8003220:	20000010 	.word	0x20000010
 8003224:	08003904 	.word	0x08003904
 8003228:	08003924 	.word	0x08003924
 800322c:	080038e4 	.word	0x080038e4

08003230 <_close_r>:
 8003230:	b538      	push	{r3, r4, r5, lr}
 8003232:	2300      	movs	r3, #0
 8003234:	4d05      	ldr	r5, [pc, #20]	; (800324c <_close_r+0x1c>)
 8003236:	4604      	mov	r4, r0
 8003238:	4608      	mov	r0, r1
 800323a:	602b      	str	r3, [r5, #0]
 800323c:	f7fd fdba 	bl	8000db4 <_close>
 8003240:	1c43      	adds	r3, r0, #1
 8003242:	d102      	bne.n	800324a <_close_r+0x1a>
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	b103      	cbz	r3, 800324a <_close_r+0x1a>
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	bd38      	pop	{r3, r4, r5, pc}
 800324c:	2000015c 	.word	0x2000015c

08003250 <__sflush_r>:
 8003250:	898a      	ldrh	r2, [r1, #12]
 8003252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003256:	4605      	mov	r5, r0
 8003258:	0710      	lsls	r0, r2, #28
 800325a:	460c      	mov	r4, r1
 800325c:	d458      	bmi.n	8003310 <__sflush_r+0xc0>
 800325e:	684b      	ldr	r3, [r1, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	dc05      	bgt.n	8003270 <__sflush_r+0x20>
 8003264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	dc02      	bgt.n	8003270 <__sflush_r+0x20>
 800326a:	2000      	movs	r0, #0
 800326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003272:	2e00      	cmp	r6, #0
 8003274:	d0f9      	beq.n	800326a <__sflush_r+0x1a>
 8003276:	2300      	movs	r3, #0
 8003278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800327c:	682f      	ldr	r7, [r5, #0]
 800327e:	602b      	str	r3, [r5, #0]
 8003280:	d032      	beq.n	80032e8 <__sflush_r+0x98>
 8003282:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003284:	89a3      	ldrh	r3, [r4, #12]
 8003286:	075a      	lsls	r2, r3, #29
 8003288:	d505      	bpl.n	8003296 <__sflush_r+0x46>
 800328a:	6863      	ldr	r3, [r4, #4]
 800328c:	1ac0      	subs	r0, r0, r3
 800328e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003290:	b10b      	cbz	r3, 8003296 <__sflush_r+0x46>
 8003292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003294:	1ac0      	subs	r0, r0, r3
 8003296:	2300      	movs	r3, #0
 8003298:	4602      	mov	r2, r0
 800329a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800329c:	4628      	mov	r0, r5
 800329e:	6a21      	ldr	r1, [r4, #32]
 80032a0:	47b0      	blx	r6
 80032a2:	1c43      	adds	r3, r0, #1
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	d106      	bne.n	80032b6 <__sflush_r+0x66>
 80032a8:	6829      	ldr	r1, [r5, #0]
 80032aa:	291d      	cmp	r1, #29
 80032ac:	d82c      	bhi.n	8003308 <__sflush_r+0xb8>
 80032ae:	4a2a      	ldr	r2, [pc, #168]	; (8003358 <__sflush_r+0x108>)
 80032b0:	40ca      	lsrs	r2, r1
 80032b2:	07d6      	lsls	r6, r2, #31
 80032b4:	d528      	bpl.n	8003308 <__sflush_r+0xb8>
 80032b6:	2200      	movs	r2, #0
 80032b8:	6062      	str	r2, [r4, #4]
 80032ba:	6922      	ldr	r2, [r4, #16]
 80032bc:	04d9      	lsls	r1, r3, #19
 80032be:	6022      	str	r2, [r4, #0]
 80032c0:	d504      	bpl.n	80032cc <__sflush_r+0x7c>
 80032c2:	1c42      	adds	r2, r0, #1
 80032c4:	d101      	bne.n	80032ca <__sflush_r+0x7a>
 80032c6:	682b      	ldr	r3, [r5, #0]
 80032c8:	b903      	cbnz	r3, 80032cc <__sflush_r+0x7c>
 80032ca:	6560      	str	r0, [r4, #84]	; 0x54
 80032cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032ce:	602f      	str	r7, [r5, #0]
 80032d0:	2900      	cmp	r1, #0
 80032d2:	d0ca      	beq.n	800326a <__sflush_r+0x1a>
 80032d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032d8:	4299      	cmp	r1, r3
 80032da:	d002      	beq.n	80032e2 <__sflush_r+0x92>
 80032dc:	4628      	mov	r0, r5
 80032de:	f000 f909 	bl	80034f4 <_free_r>
 80032e2:	2000      	movs	r0, #0
 80032e4:	6360      	str	r0, [r4, #52]	; 0x34
 80032e6:	e7c1      	b.n	800326c <__sflush_r+0x1c>
 80032e8:	6a21      	ldr	r1, [r4, #32]
 80032ea:	2301      	movs	r3, #1
 80032ec:	4628      	mov	r0, r5
 80032ee:	47b0      	blx	r6
 80032f0:	1c41      	adds	r1, r0, #1
 80032f2:	d1c7      	bne.n	8003284 <__sflush_r+0x34>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0c4      	beq.n	8003284 <__sflush_r+0x34>
 80032fa:	2b1d      	cmp	r3, #29
 80032fc:	d001      	beq.n	8003302 <__sflush_r+0xb2>
 80032fe:	2b16      	cmp	r3, #22
 8003300:	d101      	bne.n	8003306 <__sflush_r+0xb6>
 8003302:	602f      	str	r7, [r5, #0]
 8003304:	e7b1      	b.n	800326a <__sflush_r+0x1a>
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	e7ad      	b.n	800326c <__sflush_r+0x1c>
 8003310:	690f      	ldr	r7, [r1, #16]
 8003312:	2f00      	cmp	r7, #0
 8003314:	d0a9      	beq.n	800326a <__sflush_r+0x1a>
 8003316:	0793      	lsls	r3, r2, #30
 8003318:	bf18      	it	ne
 800331a:	2300      	movne	r3, #0
 800331c:	680e      	ldr	r6, [r1, #0]
 800331e:	bf08      	it	eq
 8003320:	694b      	ldreq	r3, [r1, #20]
 8003322:	eba6 0807 	sub.w	r8, r6, r7
 8003326:	600f      	str	r7, [r1, #0]
 8003328:	608b      	str	r3, [r1, #8]
 800332a:	f1b8 0f00 	cmp.w	r8, #0
 800332e:	dd9c      	ble.n	800326a <__sflush_r+0x1a>
 8003330:	4643      	mov	r3, r8
 8003332:	463a      	mov	r2, r7
 8003334:	4628      	mov	r0, r5
 8003336:	6a21      	ldr	r1, [r4, #32]
 8003338:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800333a:	47b0      	blx	r6
 800333c:	2800      	cmp	r0, #0
 800333e:	dc06      	bgt.n	800334e <__sflush_r+0xfe>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800334a:	81a3      	strh	r3, [r4, #12]
 800334c:	e78e      	b.n	800326c <__sflush_r+0x1c>
 800334e:	4407      	add	r7, r0
 8003350:	eba8 0800 	sub.w	r8, r8, r0
 8003354:	e7e9      	b.n	800332a <__sflush_r+0xda>
 8003356:	bf00      	nop
 8003358:	20400001 	.word	0x20400001

0800335c <_fflush_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	690b      	ldr	r3, [r1, #16]
 8003360:	4605      	mov	r5, r0
 8003362:	460c      	mov	r4, r1
 8003364:	b913      	cbnz	r3, 800336c <_fflush_r+0x10>
 8003366:	2500      	movs	r5, #0
 8003368:	4628      	mov	r0, r5
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	b118      	cbz	r0, 8003376 <_fflush_r+0x1a>
 800336e:	6983      	ldr	r3, [r0, #24]
 8003370:	b90b      	cbnz	r3, 8003376 <_fflush_r+0x1a>
 8003372:	f7ff fa4f 	bl	8002814 <__sinit>
 8003376:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <_fflush_r+0x6c>)
 8003378:	429c      	cmp	r4, r3
 800337a:	d11b      	bne.n	80033b4 <_fflush_r+0x58>
 800337c:	686c      	ldr	r4, [r5, #4]
 800337e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0ef      	beq.n	8003366 <_fflush_r+0xa>
 8003386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003388:	07d0      	lsls	r0, r2, #31
 800338a:	d404      	bmi.n	8003396 <_fflush_r+0x3a>
 800338c:	0599      	lsls	r1, r3, #22
 800338e:	d402      	bmi.n	8003396 <_fflush_r+0x3a>
 8003390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003392:	f7ff fadd 	bl	8002950 <__retarget_lock_acquire_recursive>
 8003396:	4628      	mov	r0, r5
 8003398:	4621      	mov	r1, r4
 800339a:	f7ff ff59 	bl	8003250 <__sflush_r>
 800339e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033a0:	4605      	mov	r5, r0
 80033a2:	07da      	lsls	r2, r3, #31
 80033a4:	d4e0      	bmi.n	8003368 <_fflush_r+0xc>
 80033a6:	89a3      	ldrh	r3, [r4, #12]
 80033a8:	059b      	lsls	r3, r3, #22
 80033aa:	d4dd      	bmi.n	8003368 <_fflush_r+0xc>
 80033ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ae:	f7ff fad0 	bl	8002952 <__retarget_lock_release_recursive>
 80033b2:	e7d9      	b.n	8003368 <_fflush_r+0xc>
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <_fflush_r+0x70>)
 80033b6:	429c      	cmp	r4, r3
 80033b8:	d101      	bne.n	80033be <_fflush_r+0x62>
 80033ba:	68ac      	ldr	r4, [r5, #8]
 80033bc:	e7df      	b.n	800337e <_fflush_r+0x22>
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <_fflush_r+0x74>)
 80033c0:	429c      	cmp	r4, r3
 80033c2:	bf08      	it	eq
 80033c4:	68ec      	ldreq	r4, [r5, #12]
 80033c6:	e7da      	b.n	800337e <_fflush_r+0x22>
 80033c8:	08003904 	.word	0x08003904
 80033cc:	08003924 	.word	0x08003924
 80033d0:	080038e4 	.word	0x080038e4

080033d4 <_lseek_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	4604      	mov	r4, r0
 80033d8:	4608      	mov	r0, r1
 80033da:	4611      	mov	r1, r2
 80033dc:	2200      	movs	r2, #0
 80033de:	4d05      	ldr	r5, [pc, #20]	; (80033f4 <_lseek_r+0x20>)
 80033e0:	602a      	str	r2, [r5, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f7fd fd0a 	bl	8000dfc <_lseek>
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	d102      	bne.n	80033f2 <_lseek_r+0x1e>
 80033ec:	682b      	ldr	r3, [r5, #0]
 80033ee:	b103      	cbz	r3, 80033f2 <_lseek_r+0x1e>
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	2000015c 	.word	0x2000015c

080033f8 <__swhatbuf_r>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	460e      	mov	r6, r1
 80033fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003400:	4614      	mov	r4, r2
 8003402:	2900      	cmp	r1, #0
 8003404:	461d      	mov	r5, r3
 8003406:	b096      	sub	sp, #88	; 0x58
 8003408:	da07      	bge.n	800341a <__swhatbuf_r+0x22>
 800340a:	2300      	movs	r3, #0
 800340c:	602b      	str	r3, [r5, #0]
 800340e:	89b3      	ldrh	r3, [r6, #12]
 8003410:	061a      	lsls	r2, r3, #24
 8003412:	d410      	bmi.n	8003436 <__swhatbuf_r+0x3e>
 8003414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003418:	e00e      	b.n	8003438 <__swhatbuf_r+0x40>
 800341a:	466a      	mov	r2, sp
 800341c:	f000 f8c8 	bl	80035b0 <_fstat_r>
 8003420:	2800      	cmp	r0, #0
 8003422:	dbf2      	blt.n	800340a <__swhatbuf_r+0x12>
 8003424:	9a01      	ldr	r2, [sp, #4]
 8003426:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800342a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800342e:	425a      	negs	r2, r3
 8003430:	415a      	adcs	r2, r3
 8003432:	602a      	str	r2, [r5, #0]
 8003434:	e7ee      	b.n	8003414 <__swhatbuf_r+0x1c>
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	2000      	movs	r0, #0
 800343a:	6023      	str	r3, [r4, #0]
 800343c:	b016      	add	sp, #88	; 0x58
 800343e:	bd70      	pop	{r4, r5, r6, pc}

08003440 <__smakebuf_r>:
 8003440:	898b      	ldrh	r3, [r1, #12]
 8003442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003444:	079d      	lsls	r5, r3, #30
 8003446:	4606      	mov	r6, r0
 8003448:	460c      	mov	r4, r1
 800344a:	d507      	bpl.n	800345c <__smakebuf_r+0x1c>
 800344c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	6123      	str	r3, [r4, #16]
 8003454:	2301      	movs	r3, #1
 8003456:	6163      	str	r3, [r4, #20]
 8003458:	b002      	add	sp, #8
 800345a:	bd70      	pop	{r4, r5, r6, pc}
 800345c:	466a      	mov	r2, sp
 800345e:	ab01      	add	r3, sp, #4
 8003460:	f7ff ffca 	bl	80033f8 <__swhatbuf_r>
 8003464:	9900      	ldr	r1, [sp, #0]
 8003466:	4605      	mov	r5, r0
 8003468:	4630      	mov	r0, r6
 800346a:	f7ff fa73 	bl	8002954 <_malloc_r>
 800346e:	b948      	cbnz	r0, 8003484 <__smakebuf_r+0x44>
 8003470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003474:	059a      	lsls	r2, r3, #22
 8003476:	d4ef      	bmi.n	8003458 <__smakebuf_r+0x18>
 8003478:	f023 0303 	bic.w	r3, r3, #3
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	81a3      	strh	r3, [r4, #12]
 8003482:	e7e3      	b.n	800344c <__smakebuf_r+0xc>
 8003484:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <__smakebuf_r+0x7c>)
 8003486:	62b3      	str	r3, [r6, #40]	; 0x28
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	6020      	str	r0, [r4, #0]
 800348c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003490:	81a3      	strh	r3, [r4, #12]
 8003492:	9b00      	ldr	r3, [sp, #0]
 8003494:	6120      	str	r0, [r4, #16]
 8003496:	6163      	str	r3, [r4, #20]
 8003498:	9b01      	ldr	r3, [sp, #4]
 800349a:	b15b      	cbz	r3, 80034b4 <__smakebuf_r+0x74>
 800349c:	4630      	mov	r0, r6
 800349e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034a2:	f000 f897 	bl	80035d4 <_isatty_r>
 80034a6:	b128      	cbz	r0, 80034b4 <__smakebuf_r+0x74>
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	89a0      	ldrh	r0, [r4, #12]
 80034b6:	4305      	orrs	r5, r0
 80034b8:	81a5      	strh	r5, [r4, #12]
 80034ba:	e7cd      	b.n	8003458 <__smakebuf_r+0x18>
 80034bc:	080027ad 	.word	0x080027ad

080034c0 <memchr>:
 80034c0:	4603      	mov	r3, r0
 80034c2:	b510      	push	{r4, lr}
 80034c4:	b2c9      	uxtb	r1, r1
 80034c6:	4402      	add	r2, r0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	d101      	bne.n	80034d2 <memchr+0x12>
 80034ce:	2000      	movs	r0, #0
 80034d0:	e003      	b.n	80034da <memchr+0x1a>
 80034d2:	7804      	ldrb	r4, [r0, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	428c      	cmp	r4, r1
 80034d8:	d1f6      	bne.n	80034c8 <memchr+0x8>
 80034da:	bd10      	pop	{r4, pc}

080034dc <__malloc_lock>:
 80034dc:	4801      	ldr	r0, [pc, #4]	; (80034e4 <__malloc_lock+0x8>)
 80034de:	f7ff ba37 	b.w	8002950 <__retarget_lock_acquire_recursive>
 80034e2:	bf00      	nop
 80034e4:	20000154 	.word	0x20000154

080034e8 <__malloc_unlock>:
 80034e8:	4801      	ldr	r0, [pc, #4]	; (80034f0 <__malloc_unlock+0x8>)
 80034ea:	f7ff ba32 	b.w	8002952 <__retarget_lock_release_recursive>
 80034ee:	bf00      	nop
 80034f0:	20000154 	.word	0x20000154

080034f4 <_free_r>:
 80034f4:	b538      	push	{r3, r4, r5, lr}
 80034f6:	4605      	mov	r5, r0
 80034f8:	2900      	cmp	r1, #0
 80034fa:	d043      	beq.n	8003584 <_free_r+0x90>
 80034fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003500:	1f0c      	subs	r4, r1, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	bfb8      	it	lt
 8003506:	18e4      	addlt	r4, r4, r3
 8003508:	f7ff ffe8 	bl	80034dc <__malloc_lock>
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <_free_r+0x94>)
 800350e:	6813      	ldr	r3, [r2, #0]
 8003510:	4610      	mov	r0, r2
 8003512:	b933      	cbnz	r3, 8003522 <_free_r+0x2e>
 8003514:	6063      	str	r3, [r4, #4]
 8003516:	6014      	str	r4, [r2, #0]
 8003518:	4628      	mov	r0, r5
 800351a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800351e:	f7ff bfe3 	b.w	80034e8 <__malloc_unlock>
 8003522:	42a3      	cmp	r3, r4
 8003524:	d90a      	bls.n	800353c <_free_r+0x48>
 8003526:	6821      	ldr	r1, [r4, #0]
 8003528:	1862      	adds	r2, r4, r1
 800352a:	4293      	cmp	r3, r2
 800352c:	bf01      	itttt	eq
 800352e:	681a      	ldreq	r2, [r3, #0]
 8003530:	685b      	ldreq	r3, [r3, #4]
 8003532:	1852      	addeq	r2, r2, r1
 8003534:	6022      	streq	r2, [r4, #0]
 8003536:	6063      	str	r3, [r4, #4]
 8003538:	6004      	str	r4, [r0, #0]
 800353a:	e7ed      	b.n	8003518 <_free_r+0x24>
 800353c:	461a      	mov	r2, r3
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	b10b      	cbz	r3, 8003546 <_free_r+0x52>
 8003542:	42a3      	cmp	r3, r4
 8003544:	d9fa      	bls.n	800353c <_free_r+0x48>
 8003546:	6811      	ldr	r1, [r2, #0]
 8003548:	1850      	adds	r0, r2, r1
 800354a:	42a0      	cmp	r0, r4
 800354c:	d10b      	bne.n	8003566 <_free_r+0x72>
 800354e:	6820      	ldr	r0, [r4, #0]
 8003550:	4401      	add	r1, r0
 8003552:	1850      	adds	r0, r2, r1
 8003554:	4283      	cmp	r3, r0
 8003556:	6011      	str	r1, [r2, #0]
 8003558:	d1de      	bne.n	8003518 <_free_r+0x24>
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4401      	add	r1, r0
 8003560:	6011      	str	r1, [r2, #0]
 8003562:	6053      	str	r3, [r2, #4]
 8003564:	e7d8      	b.n	8003518 <_free_r+0x24>
 8003566:	d902      	bls.n	800356e <_free_r+0x7a>
 8003568:	230c      	movs	r3, #12
 800356a:	602b      	str	r3, [r5, #0]
 800356c:	e7d4      	b.n	8003518 <_free_r+0x24>
 800356e:	6820      	ldr	r0, [r4, #0]
 8003570:	1821      	adds	r1, r4, r0
 8003572:	428b      	cmp	r3, r1
 8003574:	bf01      	itttt	eq
 8003576:	6819      	ldreq	r1, [r3, #0]
 8003578:	685b      	ldreq	r3, [r3, #4]
 800357a:	1809      	addeq	r1, r1, r0
 800357c:	6021      	streq	r1, [r4, #0]
 800357e:	6063      	str	r3, [r4, #4]
 8003580:	6054      	str	r4, [r2, #4]
 8003582:	e7c9      	b.n	8003518 <_free_r+0x24>
 8003584:	bd38      	pop	{r3, r4, r5, pc}
 8003586:	bf00      	nop
 8003588:	2000009c 	.word	0x2000009c

0800358c <_read_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	4604      	mov	r4, r0
 8003590:	4608      	mov	r0, r1
 8003592:	4611      	mov	r1, r2
 8003594:	2200      	movs	r2, #0
 8003596:	4d05      	ldr	r5, [pc, #20]	; (80035ac <_read_r+0x20>)
 8003598:	602a      	str	r2, [r5, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	f7fd fbed 	bl	8000d7a <_read>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d102      	bne.n	80035aa <_read_r+0x1e>
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	b103      	cbz	r3, 80035aa <_read_r+0x1e>
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	2000015c 	.word	0x2000015c

080035b0 <_fstat_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	2300      	movs	r3, #0
 80035b4:	4d06      	ldr	r5, [pc, #24]	; (80035d0 <_fstat_r+0x20>)
 80035b6:	4604      	mov	r4, r0
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	602b      	str	r3, [r5, #0]
 80035be:	f7fd fc04 	bl	8000dca <_fstat>
 80035c2:	1c43      	adds	r3, r0, #1
 80035c4:	d102      	bne.n	80035cc <_fstat_r+0x1c>
 80035c6:	682b      	ldr	r3, [r5, #0]
 80035c8:	b103      	cbz	r3, 80035cc <_fstat_r+0x1c>
 80035ca:	6023      	str	r3, [r4, #0]
 80035cc:	bd38      	pop	{r3, r4, r5, pc}
 80035ce:	bf00      	nop
 80035d0:	2000015c 	.word	0x2000015c

080035d4 <_isatty_r>:
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	2300      	movs	r3, #0
 80035d8:	4d05      	ldr	r5, [pc, #20]	; (80035f0 <_isatty_r+0x1c>)
 80035da:	4604      	mov	r4, r0
 80035dc:	4608      	mov	r0, r1
 80035de:	602b      	str	r3, [r5, #0]
 80035e0:	f7fd fc02 	bl	8000de8 <_isatty>
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	d102      	bne.n	80035ee <_isatty_r+0x1a>
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	b103      	cbz	r3, 80035ee <_isatty_r+0x1a>
 80035ec:	6023      	str	r3, [r4, #0]
 80035ee:	bd38      	pop	{r3, r4, r5, pc}
 80035f0:	2000015c 	.word	0x2000015c

080035f4 <_init>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr

08003600 <_fini>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	bf00      	nop
 8003604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003606:	bc08      	pop	{r3}
 8003608:	469e      	mov	lr, r3
 800360a:	4770      	bx	lr
